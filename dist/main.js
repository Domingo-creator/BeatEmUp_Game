/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/character.js":
/*!**************************!*\
  !*** ./src/character.js ***!
  \**************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Character\": function() { return /* binding */ Character; }\n/* harmony export */ });\n/* harmony import */ var _characterModels__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./characterModels */ \"./src/characterModels.js\");\n/* harmony import */ var _lifebar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lifebar */ \"./src/lifebar.js\");\n\n\nclass Character {\n  constructor(game, startPos, model, startingDirection = 'left', size = {\n    height: 110,\n    width: 40\n  }, items = [], powerups = []) {\n    this.game = game;\n    this.model = model;\n    this.currentAnimation = 'Idle';\n    this.size = size;\n    this.lifebar = new _lifebar__WEBPACK_IMPORTED_MODULE_1__.LifeBar(this.game.ctx, this.game.dimensions, this);\n    this.position = startPos;\n    this.stunned = false;\n    this.currentAction = null;\n    this.hitbox = [];\n    this.directionFaced = startingDirection;\n    this.framesDrawn = 0;\n    this.currentFrame = 0;\n    this.xVel = 0;\n    this.yVel = 0;\n  } /// probably unnecessary. i think all its doing is checking for a combo attack. maybe just rename something else\n\n\n  resetCurrentFrame() {\n    let data = _characterModels__WEBPACK_IMPORTED_MODULE_0__.CharacterModels[`${this.model}`][`${this.currentAnimation}`];\n\n    if (!this.comboWindowOpen || this.currentFrame === 0) {\n      this.currentFrame = this.directionFaced === 'right' ? 0 : data.max_frames - 1;\n    }\n  }\n\n  setCurrentAnimation() {\n    if (this.currentAction) {\n      this.currentAnimation = this.currentAction;\n    } else {\n      if (this.xVel === 0 && this.yVel === 0) {\n        this.currentAnimation = 'Idle';\n      } else {\n        this.currentAnimation = 'Run';\n      }\n    }\n  }\n\n  drawCharacter() {\n    //TODO make a better character animation\n    this.setCurrentAnimation();\n    let spriteSheet = new Image();\n    let data = _characterModels__WEBPACK_IMPORTED_MODULE_0__.CharacterModels[`${this.model}`][`${this.currentAnimation}`]; // if(this.currentAnimation === 'hit')console.log('way before', this.currentFrame)\n\n    this.currentFrame = this.currentFrame % data.frames;\n\n    spriteSheet.onload = () => {\n      let spriteWidth = spriteSheet.width / data.max_frames;\n      let spriteHeight = spriteSheet.height / data.num_rows;\n      let srcX;\n\n      if (this.directionFaced === 'left') {\n        srcX = this.currentFrame * spriteWidth + (data.max_frames - data.frames) * spriteWidth + data[`${this.directionFaced}_offset`];\n      } else {\n        srcX = this.currentFrame * spriteWidth + data[`${this.directionFaced}_offset`];\n      }\n\n      let srcY = spriteHeight * data.row / data.top_offset_multiplier;\n      let scaleFactor = 3;\n      this.game.ctx.drawImage(spriteSheet, srcX, srcY, spriteWidth, spriteHeight, this.position[0] + data[`${this.directionFaced}_pos_offset`], this.position[1], spriteWidth * scaleFactor, spriteHeight * scaleFactor); // this.game.ctx.fillStyle = 'yellow'\n      // this.game.ctx.fillRect(this.position[0], this.position[1], 40, 110)\n      // this.game.ctx.fillRect(this.position[0] + spriteWidth,this.position[1] + spriteSheet.height, 15, 70)\n    };\n\n    if (this.model === 'knight') {\n      spriteSheet.src = `./images/${this.model}/${this.currentAnimation}_${this.directionFaced}.png`;\n    } else {\n      spriteSheet.src = `./images/${this.model}/${this.model}_${this.directionFaced}.png`;\n    } //only update frame ever 10 draws\n\n\n    this.framesDrawn++;\n\n    if (this.framesDrawn >= 10) {\n      // if current action is death, stop animating at last frame\n      if (this.currentAction === 'death' || this.currentAction === 'hit') {\n        if (this.directionFaced === 'right') {\n          if (this.currentFrame !== data.frames - 1) this.currentFrame++;\n        } else {\n          if (this.currentFrame !== data.max_frames - data.frames) {\n            this.currentFrame--; // if(this.model === 'skeleton' && this.currentAction === 'hit')console.log(this.currentFrame)\n          }\n        }\n      } else {\n        this.directionFaced === 'right' ? this.currentFrame++ : this.currentFrame--; //reset current frame to end if left-case brings it below 0\n\n        if (this.currentFrame < 0) {\n          this.currentFrame = data.frames - 1;\n        }\n      }\n\n      this.framesDrawn = 0;\n    }\n  }\n\n  move() {\n    console.log('fell to super class move');\n  }\n\n  takeDamage(amount) {\n    if (this.currentAnimation !== 'death' && !this.iFrames) {\n      this.getHitSound();\n      this.lifebar.reduceHealth(amount);\n      this.stunned = true;\n      this.currentFrame = 0;\n      this.resetCurrentFrame();\n      this.currentAction = 'hit';\n      setTimeout(() => {\n        if (this.currentAction !== 'death') {\n          this.currentAction = null;\n        }\n      }, 500);\n      setTimeout(() => this.stunned = false, 800);\n\n      if (this.model === 'knight') {\n        this.iFrames = true;\n        setTimeout(() => this.iFrames = false, 1500);\n        this.game.currentScreen.startFlashScreen();\n      }\n    }\n  }\n\n  death() {\n    this.getDeathSound();\n    this.currentFrame = 0;\n    this.resetCurrentFrame();\n    this.stunned = true;\n    this.currentAction = 'death';\n  }\n\n  performLightAttack() {\n    // console.log('attacking')\n    if (this.directionFaced === 'right') this.hitbox = [this.position[0], this.position[1] + this.size.height, this.position[0] + 185, this.position[1]];else {\n      this.hitbox = [this.position[0] - 175, this.position[1] + this.size.height, this.position[0], this.position[1]];\n    }\n    this.currentAction = 'lAttack';\n    this.comboWindowOpen = true;\n    setTimeout(() => {\n      this.comboWindowOpen = false;\n      this.hitbox = [];\n      this.currentAction = null;\n    }, 500);\n  }\n\n  performHeavyAttack() {}\n\n  performThrow() {}\n\n  calculateHurtBox() {\n    return [this.position[0], this.position[1] + this.size.height, this.position[0] + this.size.width, this.position[1]];\n  } ///////// FIX THIS TO NOT TAKE ARGUMENTS\n\n\n  checkXInbounds(xPos) {\n    if (xPos < this.game.currentScreen.dimensions.width - 20 && xPos > 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  checkYInbounds(yPos) {\n    if (yPos > this.game.currentScreen.floorHeight - 50 && yPos < this.game.currentScreen.dimensions.height - 80) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFHLEtBQUs5RCxJQUFMLENBQVVtRCxhQUFWLENBQXdCWSxXQUF4QixHQUFzQyxFQUE3QyxJQUNDRCxJQUFJLEdBQUcsS0FBSzlELElBQUwsQ0FBVW1ELGFBQVYsQ0FBd0J2QyxVQUF4QixDQUFtQ1AsTUFBbkMsR0FBNEMsRUFEdkQsRUFDMkQ7QUFDdkQsYUFBTyxJQUFQO0FBQ0gsS0FIRCxNQUdPO0FBQ0gsYUFBTyxLQUFQO0FBQ0g7QUFDSjs7QUE1S2tCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYUFfSlNfUHJvamVjdC8uL3NyYy9jaGFyYWN0ZXIuanM/NWIwOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFyYWN0ZXJNb2RlbHMgfSBmcm9tIFwiLi9jaGFyYWN0ZXJNb2RlbHNcIjtcbmltcG9ydCB7IExpZmVCYXIgfSBmcm9tIFwiLi9saWZlYmFyXCI7XG5cbmV4cG9ydCBjbGFzcyBDaGFyYWN0ZXIge1xuICAgIGNvbnN0cnVjdG9yKGdhbWUsIHN0YXJ0UG9zLCBtb2RlbCwgc3RhcnRpbmdEaXJlY3Rpb24gPSAnbGVmdCcsIHNpemUgPXsgaGVpZ2h0OiAxMTAsIHdpZHRoOiA0MH0sIGl0ZW1zID0gW10sIHBvd2VydXBzID0gW10pIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5tb2RlbCA9IG1vZGVsO1xuICAgICAgICB0aGlzLmN1cnJlbnRBbmltYXRpb24gPSAnSWRsZSdcbiAgICAgICAgdGhpcy5zaXplID0gc2l6ZTtcbiAgICAgICAgdGhpcy5saWZlYmFyID0gbmV3IExpZmVCYXIodGhpcy5nYW1lLmN0eCwgdGhpcy5nYW1lLmRpbWVuc2lvbnMsIHRoaXMpO1xuICAgICAgICB0aGlzLnBvc2l0aW9uID0gc3RhcnRQb3M7XG4gICAgICAgIHRoaXMuc3R1bm5lZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmN1cnJlbnRBY3Rpb24gPSBudWxsO1xuICAgICAgICB0aGlzLmhpdGJveCA9IFtdXG4gICAgICAgIHRoaXMuZGlyZWN0aW9uRmFjZWQgPSBzdGFydGluZ0RpcmVjdGlvbjtcbiAgICAgICAgdGhpcy5mcmFtZXNEcmF3biA9IDA7XG4gICAgICAgIHRoaXMuY3VycmVudEZyYW1lID0gMDtcbiAgICAgICAgdGhpcy54VmVsID0gMDtcbiAgICAgICAgdGhpcy55VmVsID0gMDtcbiAgICB9XG5cbiAgICAvLy8gcHJvYmFibHkgdW5uZWNlc3NhcnkuIGkgdGhpbmsgYWxsIGl0cyBkb2luZyBpcyBjaGVja2luZyBmb3IgYSBjb21ibyBhdHRhY2suIG1heWJlIGp1c3QgcmVuYW1lIHNvbWV0aGluZyBlbHNlXG4gICAgcmVzZXRDdXJyZW50RnJhbWUoKSB7XG4gICAgICAgIGxldCBkYXRhID0gQ2hhcmFjdGVyTW9kZWxzW2Ake3RoaXMubW9kZWx9YF1bYCR7dGhpcy5jdXJyZW50QW5pbWF0aW9ufWBdXG4gICAgICAgIGlmKCF0aGlzLmNvbWJvV2luZG93T3BlbiB8fCB0aGlzLmN1cnJlbnRGcmFtZSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50RnJhbWUgPSB0aGlzLmRpcmVjdGlvbkZhY2VkID09PSAncmlnaHQnID8gMCA6IGRhdGEubWF4X2ZyYW1lcyAtIDE7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRDdXJyZW50QW5pbWF0aW9uKCkge1xuICAgICAgICBpZih0aGlzLmN1cnJlbnRBY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEFuaW1hdGlvbiA9IHRoaXMuY3VycmVudEFjdGlvbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZih0aGlzLnhWZWwgPT09IDAgJiYgdGhpcy55VmVsID09PSAwKSB7XG4gICAgICAgICAgICAgIHRoaXMuY3VycmVudEFuaW1hdGlvbiA9ICdJZGxlJ1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuY3VycmVudEFuaW1hdGlvbiA9ICdSdW4nXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZHJhd0NoYXJhY3RlcigpIHtcbiAgICAvL1RPRE8gbWFrZSBhIGJldHRlciBjaGFyYWN0ZXIgYW5pbWF0aW9uXG4gICAgdGhpcy5zZXRDdXJyZW50QW5pbWF0aW9uKCk7XG4gICAgICAgIGxldCBzcHJpdGVTaGVldCA9IG5ldyBJbWFnZSgpO1xuICAgICAgICBsZXQgZGF0YSA9IENoYXJhY3Rlck1vZGVsc1tgJHt0aGlzLm1vZGVsfWBdW2Ake3RoaXMuY3VycmVudEFuaW1hdGlvbn1gXVxuICAgICAgICAvLyBpZih0aGlzLmN1cnJlbnRBbmltYXRpb24gPT09ICdoaXQnKWNvbnNvbGUubG9nKCd3YXkgYmVmb3JlJywgdGhpcy5jdXJyZW50RnJhbWUpXG4gICAgICAgIHRoaXMuY3VycmVudEZyYW1lID0gdGhpcy5jdXJyZW50RnJhbWUgJSBkYXRhLmZyYW1lcztcbiAgICAgICAgc3ByaXRlU2hlZXQub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBzcHJpdGVXaWR0aCA9IChzcHJpdGVTaGVldC53aWR0aCkvIGRhdGEubWF4X2ZyYW1lc1xuICAgICAgICAgICAgICAgIGxldCBzcHJpdGVIZWlnaHQgPSBzcHJpdGVTaGVldC5oZWlnaHQgLyBkYXRhLm51bV9yb3dzO1xuICAgICAgICAgICAgICAgIGxldCBzcmNYO1xuICAgICAgICAgICAgICAgIGlmKHRoaXMuZGlyZWN0aW9uRmFjZWQgPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgICAgICAgICBzcmNYID0gdGhpcy5jdXJyZW50RnJhbWUgKiBzcHJpdGVXaWR0aCArICgoZGF0YS5tYXhfZnJhbWVzIC0gZGF0YS5mcmFtZXMpICogc3ByaXRlV2lkdGgpICsgZGF0YVtgJHt0aGlzLmRpcmVjdGlvbkZhY2VkfV9vZmZzZXRgXVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNyY1ggPSB0aGlzLmN1cnJlbnRGcmFtZSAqIHNwcml0ZVdpZHRoICArIGRhdGFbYCR7dGhpcy5kaXJlY3Rpb25GYWNlZH1fb2Zmc2V0YF1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IHNyY1kgPSAoc3ByaXRlSGVpZ2h0ICogZGF0YS5yb3cpIC8gZGF0YS50b3Bfb2Zmc2V0X211bHRpcGxpZXJcbiAgICAgICAgICAgICAgICBsZXQgc2NhbGVGYWN0b3IgPSAzO1xuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS5jdHguZHJhd0ltYWdlKHNwcml0ZVNoZWV0LCBzcmNYLCBzcmNZLCBzcHJpdGVXaWR0aCwgc3ByaXRlSGVpZ2h0LCB0aGlzLnBvc2l0aW9uWzBdICsgZGF0YVtgJHt0aGlzLmRpcmVjdGlvbkZhY2VkfV9wb3Nfb2Zmc2V0YF0sIHRoaXMucG9zaXRpb25bMV0sIHNwcml0ZVdpZHRoICogc2NhbGVGYWN0b3IsIHNwcml0ZUhlaWdodCAqIHNjYWxlRmFjdG9yKVxuICAgICAgICAgICAgICAgIC8vIHRoaXMuZ2FtZS5jdHguZmlsbFN0eWxlID0gJ3llbGxvdydcbiAgICAgICAgICAgICAgICAvLyB0aGlzLmdhbWUuY3R4LmZpbGxSZWN0KHRoaXMucG9zaXRpb25bMF0sIHRoaXMucG9zaXRpb25bMV0sIDQwLCAxMTApXG4gICAgICAgICAgICAgICAgLy8gdGhpcy5nYW1lLmN0eC5maWxsUmVjdCh0aGlzLnBvc2l0aW9uWzBdICsgc3ByaXRlV2lkdGgsdGhpcy5wb3NpdGlvblsxXSArIHNwcml0ZVNoZWV0LmhlaWdodCwgMTUsIDcwKVxuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5tb2RlbCA9PT0gJ2tuaWdodCcpIHtcbiAgICAgICAgICAgIHNwcml0ZVNoZWV0LnNyYyA9IGAuL2ltYWdlcy8ke3RoaXMubW9kZWx9LyR7dGhpcy5jdXJyZW50QW5pbWF0aW9ufV8ke3RoaXMuZGlyZWN0aW9uRmFjZWR9LnBuZ2A7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzcHJpdGVTaGVldC5zcmMgPSBgLi9pbWFnZXMvJHt0aGlzLm1vZGVsfS8ke3RoaXMubW9kZWx9XyR7dGhpcy5kaXJlY3Rpb25GYWNlZH0ucG5nYDtcbiAgICAgICAgfVxuICAgICAgICAvL29ubHkgdXBkYXRlIGZyYW1lIGV2ZXIgMTAgZHJhd3NcbiAgICAgICAgdGhpcy5mcmFtZXNEcmF3bisrXG4gICAgICAgIGlmKHRoaXMuZnJhbWVzRHJhd24gPj0gMTApIHtcbiAgICAgICAgICAgIC8vIGlmIGN1cnJlbnQgYWN0aW9uIGlzIGRlYXRoLCBzdG9wIGFuaW1hdGluZyBhdCBsYXN0IGZyYW1lXG4gICAgICAgICAgICBpZiAoIHRoaXMuY3VycmVudEFjdGlvbiA9PT0gJ2RlYXRoJyB8fCB0aGlzLmN1cnJlbnRBY3Rpb24gPT09ICdoaXQnKXtcbiAgICAgICAgICAgICAgICBpZih0aGlzLmRpcmVjdGlvbkZhY2VkID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKCB0aGlzLmN1cnJlbnRGcmFtZSAhPT0gZGF0YS5mcmFtZXMgLSAxKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRGcmFtZSsrO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKCB0aGlzLmN1cnJlbnRGcmFtZSAhPT0gZGF0YS5tYXhfZnJhbWVzIC0gZGF0YS5mcmFtZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEZyYW1lLS07XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZih0aGlzLm1vZGVsID09PSAnc2tlbGV0b24nICYmIHRoaXMuY3VycmVudEFjdGlvbiA9PT0gJ2hpdCcpY29uc29sZS5sb2codGhpcy5jdXJyZW50RnJhbWUpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZGlyZWN0aW9uRmFjZWQgPT09ICdyaWdodCcgPyB0aGlzLmN1cnJlbnRGcmFtZSsrOiB0aGlzLmN1cnJlbnRGcmFtZS0tO1xuICAgICAgICAgICAgICAgIC8vcmVzZXQgY3VycmVudCBmcmFtZSB0byBlbmQgaWYgbGVmdC1jYXNlIGJyaW5ncyBpdCBiZWxvdyAwXG4gICAgICAgICAgICAgICAgaWYodGhpcy5jdXJyZW50RnJhbWUgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEZyYW1lID0gZGF0YS5mcmFtZXMgLSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5mcmFtZXNEcmF3biA9IDA7XG4gICAgICAgIH1cbiAgICBcbiAgICB9XG5cbiAgICBtb3ZlKCkge1xuICAgICAgICBjb25zb2xlLmxvZygnZmVsbCB0byBzdXBlciBjbGFzcyBtb3ZlJylcbiAgICB9XG4gICAgXG4gICAgdGFrZURhbWFnZShhbW91bnQpIHtcbiAgICAgICAgaWYodGhpcy5jdXJyZW50QW5pbWF0aW9uICE9PSAnZGVhdGgnICYmICF0aGlzLmlGcmFtZXMpIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0SGl0U291bmQoKTtcbiAgICAgICAgICAgIHRoaXMubGlmZWJhci5yZWR1Y2VIZWFsdGgoYW1vdW50KVxuICAgICAgICAgICAgdGhpcy5zdHVubmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEZyYW1lID0gMDtcbiAgICAgICAgICAgIHRoaXMucmVzZXRDdXJyZW50RnJhbWUoKTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEFjdGlvbiA9ICdoaXQnXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYodGhpcy5jdXJyZW50QWN0aW9uICE9PSAnZGVhdGgnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50QWN0aW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCA1MDApXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCAoKSA9PiB0aGlzLnN0dW5uZWQgPSBmYWxzZSwgODAwKVxuICAgICAgICAgICAgaWYodGhpcy5tb2RlbCA9PT0gJ2tuaWdodCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlGcmFtZXMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoICgpID0+IHRoaXMuaUZyYW1lcyA9IGZhbHNlLCAxNTAwKVxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS5jdXJyZW50U2NyZWVuLnN0YXJ0Rmxhc2hTY3JlZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlYXRoKCkge1xuICAgICAgICB0aGlzLmdldERlYXRoU291bmQoKTtcbiAgICAgICAgdGhpcy5jdXJyZW50RnJhbWUgPSAwO1xuICAgICAgICB0aGlzLnJlc2V0Q3VycmVudEZyYW1lKCk7XG4gICAgICAgIHRoaXMuc3R1bm5lZCA9IHRydWU7XG4gICAgICAgIHRoaXMuY3VycmVudEFjdGlvbiA9ICdkZWF0aCc7XG4gICAgfVxuICBcbiAgICBwZXJmb3JtTGlnaHRBdHRhY2soKXtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2F0dGFja2luZycpXG4gICAgICAgIGlmICh0aGlzLmRpcmVjdGlvbkZhY2VkID09PSAncmlnaHQnKVxuICAgICAgICAgICAgdGhpcy5oaXRib3ggPSBbdGhpcy5wb3NpdGlvblswXSx0aGlzLnBvc2l0aW9uWzFdK3RoaXMuc2l6ZS5oZWlnaHQsdGhpcy5wb3NpdGlvblswXSsxODUsIHRoaXMucG9zaXRpb25bMV1dXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5oaXRib3ggPSBbdGhpcy5wb3NpdGlvblswXSAtIDE3NSx0aGlzLnBvc2l0aW9uWzFdK3RoaXMuc2l6ZS5oZWlnaHQsdGhpcy5wb3NpdGlvblswXSwgdGhpcy5wb3NpdGlvblsxXV1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmN1cnJlbnRBY3Rpb24gPSAnbEF0dGFjayc7XG4gICAgICAgIHRoaXMuY29tYm9XaW5kb3dPcGVuID0gdHJ1ZTtcbiAgICAgICAgc2V0VGltZW91dCggKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jb21ib1dpbmRvd09wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuaGl0Ym94ID0gW11cbiAgICAgICAgICAgIHRoaXMuY3VycmVudEFjdGlvbiA9IG51bGw7XG4gICAgICAgIH0sNTAwKVxuICAgIH1cblxuICAgIHBlcmZvcm1IZWF2eUF0dGFjaygpIHtcblxuICAgIH1cblxuICAgIHBlcmZvcm1UaHJvdygpe1xuXG4gICAgfVxuICBcbiAgICBjYWxjdWxhdGVIdXJ0Qm94KCkge1xuICAgICAgICByZXR1cm4gIFt0aGlzLnBvc2l0aW9uWzBdLHRoaXMucG9zaXRpb25bMV0rdGhpcy5zaXplLmhlaWdodCwgdGhpcy5wb3NpdGlvblswXSArIHRoaXMuc2l6ZS53aWR0aCwgdGhpcy5wb3NpdGlvblsxXV1cbiAgICB9XG5cblxuICAgIC8vLy8vLy8vLyBGSVggVEhJUyBUTyBOT1QgVEFLRSBBUkdVTUVOVFNcbiAgICBjaGVja1hJbmJvdW5kcyh4UG9zKSB7XG4gICAgICAgIGlmICh4UG9zIDwgdGhpcy5nYW1lLmN1cnJlbnRTY3JlZW4uZGltZW5zaW9ucy53aWR0aCAtIDIwICYmIHhQb3MgPiAwICl7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHsgXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNoZWNrWUluYm91bmRzKHlQb3MpIHtcbiAgICAgICAgaWYoeVBvcyA+IHRoaXMuZ2FtZS5jdXJyZW50U2NyZWVuLmZsb29ySGVpZ2h0IC0gNTAgJiZcbiAgICAgICAgICAgIHlQb3MgPCB0aGlzLmdhbWUuY3VycmVudFNjcmVlbi5kaW1lbnNpb25zLmhlaWdodCAtIDgwKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxufSJdLCJuYW1lcyI6WyJDaGFyYWN0ZXJNb2RlbHMiLCJMaWZlQmFyIiwiQ2hhcmFjdGVyIiwiY29uc3RydWN0b3IiLCJnYW1lIiwic3RhcnRQb3MiLCJtb2RlbCIsInN0YXJ0aW5nRGlyZWN0aW9uIiwic2l6ZSIsImhlaWdodCIsIndpZHRoIiwiaXRlbXMiLCJwb3dlcnVwcyIsImN1cnJlbnRBbmltYXRpb24iLCJsaWZlYmFyIiwiY3R4IiwiZGltZW5zaW9ucyIsInBvc2l0aW9uIiwic3R1bm5lZCIsImN1cnJlbnRBY3Rpb24iLCJoaXRib3giLCJkaXJlY3Rpb25GYWNlZCIsImZyYW1lc0RyYXduIiwiY3VycmVudEZyYW1lIiwieFZlbCIsInlWZWwiLCJyZXNldEN1cnJlbnRGcmFtZSIsImRhdGEiLCJjb21ib1dpbmRvd09wZW4iLCJtYXhfZnJhbWVzIiwic2V0Q3VycmVudEFuaW1hdGlvbiIsImRyYXdDaGFyYWN0ZXIiLCJzcHJpdGVTaGVldCIsIkltYWdlIiwiZnJhbWVzIiwib25sb2FkIiwic3ByaXRlV2lkdGgiLCJzcHJpdGVIZWlnaHQiLCJudW1fcm93cyIsInNyY1giLCJzcmNZIiwicm93IiwidG9wX29mZnNldF9tdWx0aXBsaWVyIiwic2NhbGVGYWN0b3IiLCJkcmF3SW1hZ2UiLCJzcmMiLCJtb3ZlIiwiY29uc29sZSIsImxvZyIsInRha2VEYW1hZ2UiLCJhbW91bnQiLCJpRnJhbWVzIiwiZ2V0SGl0U291bmQiLCJyZWR1Y2VIZWFsdGgiLCJzZXRUaW1lb3V0IiwiY3VycmVudFNjcmVlbiIsInN0YXJ0Rmxhc2hTY3JlZW4iLCJkZWF0aCIsImdldERlYXRoU291bmQiLCJwZXJmb3JtTGlnaHRBdHRhY2siLCJwZXJmb3JtSGVhdnlBdHRhY2siLCJwZXJmb3JtVGhyb3ciLCJjYWxjdWxhdGVIdXJ0Qm94IiwiY2hlY2tYSW5ib3VuZHMiLCJ4UG9zIiwiY2hlY2tZSW5ib3VuZHMiLCJ5UG9zIiwiZmxvb3JIZWlnaHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/character.js\n");

/***/ }),

/***/ "./src/characterModels.js":
/*!********************************!*\
  !*** ./src/characterModels.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CharacterModels\": function() { return /* binding */ CharacterModels; },\n/* harmony export */   \"BackgroundModels\": function() { return /* binding */ BackgroundModels; }\n/* harmony export */ });\nconst CharacterModels = {\n  //left_offset = how much over over in the frame to shift over to make knight centered \n  //pos_offset = how much to be offset to make frames on screen match where they should be\n  knight: {\n    Idle: {\n      row: 1,\n      num_rows: 1,\n      frames: 10,\n      max_frames: 10,\n      left_offset: 40,\n      right_offset: 40,\n      left_pos_offset: -60,\n      right_pos_offset: -20,\n      top_offset_multiplier: 1.9\n    },\n    lAttack: {\n      row: 1,\n      num_rows: 1,\n      frames: 10,\n      max_frames: 10,\n      left_offset: -20,\n      right_offset: 0,\n      left_pos_offset: -260,\n      right_pos_offset: -120,\n      top_offset_multiplier: 1.9\n    },\n    hAttack: {\n      row: 1,\n      num_rows: 1,\n      frames: 6,\n      max_frames: 6,\n      left_offset: 20,\n      right_offset: 20,\n      left_pos_offset: 0,\n      right_pos_offset: 0,\n      top_offset_multiplier: 1.9\n    },\n    jump: {\n      row: 1,\n      num_rows: 1,\n      frames: 3,\n      max_frames: 3,\n      left_offset: 20,\n      right_offset: 20,\n      pos_offset: 0,\n      left_pos_offset: -130,\n      right_pos_offset: -100,\n      top_offset_multiplier: 1.9\n    },\n    jumpFallinbetween: {\n      row: 1,\n      num_rows: 1,\n      frames: 2,\n      max_frames: 2,\n      left_offset: 20,\n      right_offset: 20,\n      left_pos_offset: 0,\n      right_pos_offset: 0,\n      top_offset_multiplier: 1.9\n    },\n    Run: {\n      row: 1,\n      num_rows: 1,\n      frames: 10,\n      max_frames: 10,\n      left_offset: 40,\n      right_offset: 40,\n      left_pos_offset: -40,\n      right_pos_offset: -40,\n      top_offset_multiplier: 1.9\n    },\n    hit: {\n      row: 1,\n      num_rows: 1,\n      frames: 1,\n      max_frames: 1,\n      left_offset: 0,\n      right_offset: 0,\n      left_pos_offset: -120,\n      right_pos_offset: -80,\n      top_offset_multiplier: 1.9\n    },\n    death: {\n      row: 1,\n      num_rows: 1,\n      frames: 10,\n      max_frames: 10,\n      left_offset: 0,\n      right_offset: 0,\n      left_pos_offset: -260,\n      right_pos_offset: -120,\n      top_offset_multiplier: 1.9\n    }\n  },\n  skeleton: {\n    Idle: {\n      row: 4,\n      num_rows: 5,\n      frames: 4,\n      max_frames: 13,\n      left_offset: 0,\n      right_offset: 0,\n      left_pos_offset: -80,\n      right_pos_offset: -80,\n      top_offset_multiplier: 1.8\n    },\n    lAttack: {\n      row: 1,\n      num_rows: 5,\n      frames: 13,\n      max_frames: 13,\n      left_offset: 0,\n      right_offset: 0,\n      left_pos_offset: -80,\n      right_pos_offset: -80,\n      top_offset_multiplier: 4.6\n    },\n    death: {\n      row: 2,\n      num_rows: 5,\n      frames: 13,\n      max_frames: 13,\n      left_offset: 0,\n      right_offset: 0,\n      left_pos_offset: -80,\n      right_pos_offset: -80,\n      top_offset_multiplier: 1.70\n    },\n    hit: {\n      row: 2,\n      num_rows: 5,\n      frames: 3,\n      max_frames: 13,\n      left_offset: 0,\n      right_offset: 0,\n      left_pos_offset: -80,\n      right_pos_offset: -80,\n      top_offset_multiplier: 1.65\n    },\n    Run: {\n      row: 3,\n      num_rows: 5,\n      frames: 12,\n      max_frames: 13,\n      left_offset: 0,\n      right_offset: 0,\n      left_pos_offset: -80,\n      right_pos_offset: -80,\n      top_offset_multiplier: 1.35\n    }\n  }\n};\nconst BackgroundModels = {\n  lightning: {\n    typeA: {\n      row: 1,\n      num_rows: 2,\n      frames: 6,\n      max_frames: 6,\n      left_offset: 0,\n      right_offset: 0,\n      left_pos_offset: 0,\n      right_pos_offset: 0,\n      top_offset_multiplier: 0\n    },\n    typeB: {\n      row: 2,\n      num_rows: 2,\n      frames: 6,\n      max_frames: 6,\n      left_offset: 0,\n      right_offset: 0,\n      left_pos_offset: 0,\n      right_pos_offset: 0,\n      top_offset_multiplier: 0\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/characterModels.js\n");

/***/ }),

/***/ "./src/continueScreen.js":
/*!*******************************!*\
  !*** ./src/continueScreen.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ContinueScreen\": function() { return /* binding */ ContinueScreen; }\n/* harmony export */ });\n/* harmony import */ var _stage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stage */ \"./src/stage.js\");\n/* harmony import */ var _start_menu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./start_menu */ \"./src/start_menu.js\");\n\n\nclass ContinueScreen {\n  constructor(game) {\n    this.game = game;\n    this.ctx = this.game.ctx;\n    this.dimensions = this.game.dimensions;\n    this.continueDelay = 100; //number of frames to delay the continue option\n\n    this.optionSelected = 'Yes';\n    this.score = this.game.currentScreen.score;\n    this.score.timer.stopTimer();\n    this.moveLockout = true;\n    setTimeout(() => this.moveLockout = false, 1000);\n  }\n\n  draw() {\n    this.ctx.globalAlpha = 0.5; // set global alpha\n\n    this.ctx.fillStyle = \"gray\";\n    this.ctx.fillRect(0, 0, this.dimensions.width, this.dimensions.height);\n    this.ctx.globalAlpha = 1.0;\n    this.ctx.font = '100px Sans-serif';\n    this.ctx.strokeStyle = 'black';\n    this.ctx.lineWidth = 8;\n    this.ctx.fillStyle = 'red';\n    this.ctx.strokeText('Game Over', this.dimensions.width / 2, this.dimensions.height / 2 - 100);\n    this.ctx.fillText('Game Over', this.dimensions.width / 2, this.dimensions.height / 2 - 100);\n    this.ctx.fillStyle = 'yellow';\n    this.ctx.font = '60px Sans-serif';\n    this.ctx.strokeText('Retry?', this.dimensions.width / 2, this.dimensions.height / 2 + 100);\n    this.ctx.fillText('Retry?', this.dimensions.width / 2, this.dimensions.height / 2 + 100);\n    this.ctx.font = '40px Sans-serif';\n    this.ctx.fillStyle = this.optionSelected === 'Yes' ? 'yellow' : 'red';\n    this.ctx.strokeText('Yes', this.dimensions.width / 2 - 50, this.dimensions.height - 60);\n    this.ctx.fillText('Yes', this.dimensions.width / 2 - 50, this.dimensions.height - 60);\n    this.ctx.fillStyle = this.optionSelected === 'No' ? 'yellow' : 'red';\n    this.ctx.strokeText('No', this.dimensions.width / 2 + 50, this.dimensions.height - 60);\n    this.ctx.fillText('No', this.dimensions.width / 2 + 50, this.dimensions.height - 60);\n  }\n\n  move(command) {\n    if (!this.moveLockout) if (command.left || command.right) {\n      this.optionSelected = this.optionSelected === 'Yes' ? 'No' : 'Yes';\n      this.playSound();\n      this.moveLockout = true;\n      setTimeout(() => this.moveLockout = false, 200);\n    }\n  }\n\n  performAction(command) {\n    if (!this.moveLockout) {\n      if (command.lAttack) {\n        if (this.optionSelected === 'Yes') {\n          this.playSound();\n          this.game.currentScreen = new _stage__WEBPACK_IMPORTED_MODULE_0__.Stage(this.game);\n        } else {\n          this.playSound();\n          this.game.currentScreen.stopMusic();\n          this.game.currentScreen = new _start_menu__WEBPACK_IMPORTED_MODULE_1__.StartMenu(this.game);\n        }\n      }\n    }\n  }\n\n  playSound() {\n    if (this.game.options.sound === 'on') {\n      var sound = new Howl({\n        src: ['./sounds/menu_sounds/MENU_Pick.wav']\n      });\n      sound.play();\n    }\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/continueScreen.js\n");

/***/ }),

/***/ "./src/cpuCharacter.js":
/*!*****************************!*\
  !*** ./src/cpuCharacter.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cpuCharacter\": function() { return /* binding */ cpuCharacter; }\n/* harmony export */ });\n/* harmony import */ var _character__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./character */ \"./src/character.js\");\n\nclass cpuCharacter extends _character__WEBPACK_IMPORTED_MODULE_0__.Character {\n  constructor(game, startPos, enermyType = 'skeleton', scoreBase = 50) {\n    super(game, startPos, enermyType, Math.floor(Math.random() * 2) === 1 ? 'left' : 'right');\n    this.hitBoxRange = [175, 50];\n    this.agressionRating = this.getAggressionRating(); // a number between 0-100, indicating likelyhood that enemy attacks while in range\n\n    this.ActionLockOut = false;\n    this.scoreBase = scoreBase;\n  }\n\n  getAggressionRating() {\n    if (this.game.options.difficulty === 'easy') {\n      return 10;\n    }\n  }\n\n  determineNextAction() {\n    //simple logic AI.  Maybe make this easy mode later\n    if (!this.stunned && !this.ActionLockOut) //if not in bounds\n      if (!this.checkXInbounds(this.position[0])) {\n        this.move();\n      } else {\n        //move toards player or randomly attack\n        this.isPlayerInRange() ? this.getRandomInRangeAction() : this.move();\n      }\n  }\n\n  facePlayer() {\n    if (this.game.currentScreen.player.position[0] < this.position[0]) {\n      this.directionFaced = 'left';\n    } else {\n      this.directionFaced = 'right';\n    }\n  }\n\n  isPlayerInRange() {\n    let playerPosition = this.game.currentScreen.player.position; // console.log(this.position[0] - playerPosition[0] < this.hitBoxRange[0])\n\n    if (Math.abs(this.position[0] - playerPosition[0]) < this.hitBoxRange[0] && Math.abs(this.position[1] - playerPosition[1]) < this.hitBoxRange[1] && this.game.currentScreen.player.currentAction !== 'jump') {\n      return true;\n    }\n\n    return false;\n  }\n\n  getRandomInRangeAction() {\n    if (Math.random() * 100 < this.agressionRating) this.performLightAttack();\n  }\n\n  move() {\n    this.facePlayer();\n\n    if (!this.checkXInbounds(this.position[0])) {\n      this.xVel = this.directionFaced === 'left' ? -2 : 2;\n    } else {\n      this.xVel = Math.floor(Math.random()) + 1;\n      this.yVel = Math.floor(Math.random() * 2);\n      if (this.directionFaced === 'left') this.xVel = -this.xVel;\n      if (this.position[1] > this.game.currentScreen.player.position[1]) this.yVel = -this.yVel;\n    }\n\n    this.updateCurrentPos();\n  }\n\n  updateCurrentPos() {\n    this.position[0] += this.xVel;\n    this.position[1] += this.yVel;\n  }\n\n  lockOutAction() {\n    this.ActionLockOut = true;\n    this.xVel = 0;\n    this.yVel = 0;\n    setTimeout(() => this.ActionLockOut = false, 500);\n  }\n\n  posture() {}\n\n  getAttackTimeOut() {}\n\n  performAction() {}\n\n  getHitSound() {}\n\n  getDeathSound() {}\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cpuCharacter.js\n");

/***/ }),

/***/ "./src/game.js":
/*!*********************!*\
  !*** ./src/game.js ***!
  \*********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Game\": function() { return /* binding */ Game; }\n/* harmony export */ });\n/* harmony import */ var _character__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./character */ \"./src/character.js\");\n/* harmony import */ var _gameInstruction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gameInstruction */ \"./src/gameInstruction.js\");\n/* harmony import */ var _options__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./options */ \"./src/options.js\");\n/* harmony import */ var _playerCharacter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./playerCharacter */ \"./src/playerCharacter.js\");\n/* harmony import */ var _stage__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./stage */ \"./src/stage.js\");\n/* harmony import */ var _start_menu__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./start_menu */ \"./src/start_menu.js\");\n\n\n\n\n\n\nclass Game {\n  constructor(canvas) {\n    this.ctx = canvas.getContext(\"2d\");\n    this.dimensions = {\n      width: canvas.width,\n      height: canvas.height\n    };\n    this.options = new _options__WEBPACK_IMPORTED_MODULE_2__.Options();\n    this.startMenu();\n    this.controller = {\n      up: false,\n      down: false,\n      left: false,\n      right: false,\n      lAttack: false,\n      hAttack: false,\n      jump: false,\n      throw: false\n    };\n    this.update();\n    this.ctx.webkitImageSmoothingEnabled = false;\n    this.ctx.imageSmoothingEnabled = false;\n  }\n\n  startMenu() {\n    this.currentScreen = new _start_menu__WEBPACK_IMPORTED_MODULE_5__.StartMenu(this);\n  }\n\n  startInstructions() {\n    this.currentScreen = new _gameInstruction__WEBPACK_IMPORTED_MODULE_1__.GameInstructions(this);\n  }\n\n  startGame() {\n    this.currentScreen = new _stage__WEBPACK_IMPORTED_MODULE_4__.Stage(this);\n  }\n\n  startDashTimeOut() {\n    this.dashTimeOut = setTimeout(() => {\n      this.dashWindow = null;\n    }, 2000);\n  }\n\n  setKeyDown(command) {\n    if (command === 'left' || command === 'right') {\n      if (this.dashWindow && this.dashWindow.direction === command) {\n        if (this.dashWindow.numUp > 0) this.dashWindow.numDown++;\n      } else {\n        this.dashWindow = {\n          numDown: 1,\n          numUp: 0,\n          direction: command\n        };\n        this.startDashTimeOut();\n      }\n    }\n\n    this.controller[`${command}`] = true;\n  }\n\n  setKeyUp(command) {\n    if (command === 'left' || command === 'right') {\n      if (this.dashWindow && this.dashWindow.direction === command) {\n        this.dashWindow.numUp++;\n\n        if (this.dashWindow.numDown >= 2 && this.dashWindow.numUp >= 2) {\n          if (this.currentScreen.constructor === _stage__WEBPACK_IMPORTED_MODULE_4__.Stage) {\n            this.currentScreen.player.dash(`${command}`);\n            this.dashTimeOut = null;\n          }\n        }\n      }\n    }\n\n    this.controller[`${command}`] = false;\n  }\n\n  checkInputs() {\n    let moveInputs = {\n      left: this.controller.left,\n      up: this.controller.up,\n      right: this.controller.right,\n      down: this.controller.down\n    };\n    let actionInputs = {\n      lAttack: this.controller.lAttack,\n      hAttack: this.controller.hAttack,\n      jump: this.controller.jump,\n      throw: this.controller.throw\n    };\n    this.currentScreen.move(moveInputs);\n    this.currentScreen.performAction(actionInputs);\n  }\n\n  update() {\n    this.currentScreen.draw(this.ctx);\n    this.checkInputs();\n\n    if (this.currentScreen.constructor === _stage__WEBPACK_IMPORTED_MODULE_4__.Stage) {\n      this.currentScreen.checkAttacksLanded();\n      this.currentScreen.checkKilledEnemies();\n      this.currentScreen.checkKilledPlayer();\n      this.currentScreen.addNewEnemies();\n      this.currentScreen.enemies.forEach(enemy => enemy.determineNextAction());\n    }\n\n    requestAnimationFrame(this.update.bind(this));\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/game.js\n");

/***/ }),

/***/ "./src/gameInstruction.js":
/*!********************************!*\
  !*** ./src/gameInstruction.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GameInstructions\": function() { return /* binding */ GameInstructions; }\n/* harmony export */ });\n/* harmony import */ var _characterModels__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./characterModels */ \"./src/characterModels.js\");\n\nclass GameInstructions {\n  constructor(game) {\n    this.game = game;\n    this.ctx = game.ctx;\n    this.dimensions = game.dimensions;\n    this.framesDrawn = 0;\n    this.currentFrame = 0;\n    this.currentStep = 0;\n    this.getNextStep();\n  }\n\n  draw(ctx) {\n    // console.log(this.currentFrame)\n    if (this.currentStep >= 4) {\n      this.ctx.fillStyle = 'black';\n      this.ctx.fillRect(0, 0, this.dimensions.width, this.dimensions.height);\n      this.ctx.fillStyle = 'red';\n      this.ctx.font = '80px Sans-serif';\n      this.ctx.fillText(`${this.currentInstruction}`, this.dimensions.width / 2, this.dimensions.height / 2);\n    } else {\n      this.currentFrame = this.currentFrame % this.currentData.max_frames;\n      let spriteSheet = new Image();\n\n      spriteSheet.onload = () => {\n        this.ctx.fillStyle = 'black';\n        this.ctx.fillRect(0, 0, this.dimensions.width, this.dimensions.height);\n        let spriteWidth = spriteSheet.width / this.currentData.max_frames;\n        let spriteHeight = spriteSheet.height / this.currentData.num_rows;\n        let srcX = this.currentFrame * spriteWidth + this.currentData.right_offset;\n        let srcY = spriteHeight * this.currentData.row / this.currentData.top_offset_multiplier;\n        let scaleFactor = 3;\n        this.ctx.drawImage(spriteSheet, srcX, srcY, spriteWidth, spriteHeight, this.dimensions.width / 2.6, this.dimensions.height / 2, spriteWidth * scaleFactor, spriteHeight * scaleFactor);\n        this.ctx.fillStyle = 'red';\n        this.ctx.font = '20px Sans-serif';\n        let text;\n\n        switch (this.currentStep) {\n          case 1:\n            text = 'Movement Controls: A: Left, S: down, D: right, W: up';\n            break;\n\n          case 2:\n            text = 'Use the space bar to jump';\n            break;\n\n          case 3:\n            text = 'Attack with \"J\".  Slay the skeletons before they slay you!';\n            break;\n        }\n\n        this.ctx.fillText(`${text}`, this.dimensions.width / 2, this.dimensions.height / 1.2);\n      };\n\n      spriteSheet.src = `./images/knight/${this.currentInstruction}_right.png`;\n      this.framesDrawn++;\n\n      if (this.framesDrawn >= 10) {\n        this.currentFrame++;\n        this.framesDrawn = 0;\n      }\n    }\n  }\n\n  getNextStep() {\n    this.currentStep++;\n\n    if (this.currentStep === 1) {\n      this.currentInstruction = 'Run';\n      this.currentData = _characterModels__WEBPACK_IMPORTED_MODULE_0__.CharacterModels.knight.Run;\n      setTimeout(() => this.getNextStep(), 6000);\n    } else if (this.currentStep === 2) {\n      this.currentInstruction = 'jump';\n      this.currentData = _characterModels__WEBPACK_IMPORTED_MODULE_0__.CharacterModels.knight.jump;\n      setTimeout(() => this.getNextStep(), 3000);\n    } else if (this.currentStep === 3) {\n      this.currentInstruction = 'lAttack';\n      this.currentData = _characterModels__WEBPACK_IMPORTED_MODULE_0__.CharacterModels.knight.lAttack;\n      setTimeout(() => this.getNextStep(), 7000);\n    } else if (this.currentStep === 4) {\n      this.currentInstruction = 'Get Ready...';\n      setTimeout(() => this.getNextStep(), 3000);\n    } else if (this.currentStep === 5) {\n      this.currentInstruction = 'Start';\n      setTimeout(() => this.game.startGame(), 1000);\n    }\n  }\n\n  move() {} //dummy funcion}\n\n\n  performAction() {} //dummy function\n\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/gameInstruction.js\n");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var howler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! howler */ \"./node_modules/howler/dist/howler.js\");\n/* harmony import */ var howler__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(howler__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _game_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./game.js */ \"./src/game.js\");\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  //Page Open Screen\n  let backgroundContainer = document.querySelector('.background-container');\n  let enterGameCheckbox = document.querySelector('#enter-checkbox');\n  let enterSign = document.createElement('img');\n  let clickHereSign = document.createElement('img');\n  let arcadeOpenSign = document.createElement('img');\n  let clickContainer = document.createElement('div');\n  let muteButton = document.querySelector('.mute-button');\n  enterSign.setAttribute('src', './images/mainPage/neon_enter_sign.gif');\n  clickHereSign.setAttribute('src', './images/mainPage/neon_click_here.gif');\n  arcadeOpenSign.setAttribute('src', './images/mainPage/arcadeSign.gif');\n  enterSign.classList.add('enter-sign');\n  arcadeOpenSign.classList.add('arcade-open-sign');\n  clickHereSign.classList.add('click-here-sign');\n  clickContainer.classList.add('click-container');\n  backgroundContainer.appendChild(arcadeOpenSign);\n  clickContainer.appendChild(enterSign);\n  clickContainer.appendChild(clickHereSign);\n  backgroundContainer.appendChild(clickContainer);\n  let game;\n  muteButton.addEventListener('click', e => {\n    if (muteButton.value === 'mute') {}\n  });\n  clickContainer.addEventListener('click', e => {\n    //hide neon signs\n    clickContainer.style.display = 'none';\n    clickHereSign.style.display = 'none';\n    enterSign.style.display = 'none';\n    arcadeOpenSign.style.display = 'none';\n    enterGameCheckbox.checked = true; // Display Game Screen after zoom animation\n\n    setTimeout(() => {\n      backgroundContainer.style.backgroundImage = \"url('./images/mainPage/arcade_screen_background.jpg')\";\n      backgroundContainer.style.backgroundSize = 'contain';\n      document.querySelector('.canvas-container').style.display = 'flex';\n      let canvas = document.getElementById('game-canvas');\n      game = new _game_js__WEBPACK_IMPORTED_MODULE_1__.Game(canvas);\n      enterGameCheckbox.checked = false;\n      document.addEventListener('keydown', e => {\n        // console.log(e.code)\n        let command = Object.keys(game.options.controls).filter(key => game.options.controls[key] === e.code);\n        if (command.length) game.setKeyDown(command[0]);\n      });\n      document.addEventListener('keyup', e => {\n        let command = Object.keys(game.options.controls).filter(key => game.options.controls[key] === e.code);\n        if (command.length) game.setKeyUp(command[0]);\n      });\n    }, 5000);\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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YUFBeEIsQ0FBYjtBQUNBVixNQUFBQSxJQUFJLEdBQUcsSUFBSWhCLDBDQUFKLENBQVN5QixNQUFULENBQVA7QUFDQXBCLE1BQUFBLGlCQUFpQixDQUFDZ0IsT0FBbEIsR0FBNEIsS0FBNUI7QUFLQXBCLE1BQUFBLFFBQVEsQ0FBQ0MsZ0JBQVQsQ0FBMEIsU0FBMUIsRUFBc0NlLENBQUQsSUFBTztBQUN4QztBQUNBLFlBQUlVLE9BQU8sR0FBR0MsTUFBTSxDQUFDQyxJQUFQLENBQVliLElBQUksQ0FBQ2MsT0FBTCxDQUFhQyxRQUF6QixFQUFtQ0MsTUFBbkMsQ0FBMkNDLEdBQUcsSUFBSWpCLElBQUksQ0FBQ2MsT0FBTCxDQUFhQyxRQUFiLENBQXNCRSxHQUF0QixNQUErQmhCLENBQUMsQ0FBQ2lCLElBQW5GLENBQWQ7QUFDQSxZQUFJUCxPQUFPLENBQUNRLE1BQVosRUFBb0JuQixJQUFJLENBQUNvQixVQUFMLENBQWdCVCxPQUFPLENBQUMsQ0FBRCxDQUF2QjtBQUN2QixPQUpEO0FBTUExQixNQUFBQSxRQUFRLENBQUNDLGdCQUFULENBQTBCLE9BQTFCLEVBQW9DZSxDQUFELElBQU87QUFDdEMsWUFBSVUsT0FBTyxHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWWIsSUFBSSxDQUFDYyxPQUFMLENBQWFDLFFBQXpCLEVBQW1DQyxNQUFuQyxDQUEyQ0MsR0FBRyxJQUFJakIsSUFBSSxDQUFDYyxPQUFMLENBQWFDLFFBQWIsQ0FBc0JFLEdBQXRCLE1BQStCaEIsQ0FBQyxDQUFDaUIsSUFBbkYsQ0FBZDtBQUNBLFlBQUlQLE9BQU8sQ0FBQ1EsTUFBWixFQUFvQm5CLElBQUksQ0FBQ3FCLFFBQUwsQ0FBY1YsT0FBTyxDQUFDLENBQUQsQ0FBckI7QUFDM0IsT0FIRztBQUlILEtBckJTLEVBcUJQLElBckJPLENBQVY7QUFzQkgsR0FoQ0Q7QUFpQ0gsQ0E5REQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hQV9KU19Qcm9qZWN0Ly4vc3JjL2luZGV4LmpzP2I2MzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtIb3dsLCBIb3dsZXJ9IGZyb20gJ2hvd2xlcic7XG5pbXBvcnQgeyBHYW1lIH0gZnJvbSAnLi9nYW1lLmpzJ1xuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCAoKSA9PiB7XG4gICAgLy9QYWdlIE9wZW4gU2NyZWVuXG4gICAgbGV0IGJhY2tncm91bmRDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYmFja2dyb3VuZC1jb250YWluZXInKVxuICAgIGxldCBlbnRlckdhbWVDaGVja2JveCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNlbnRlci1jaGVja2JveCcpXG4gICAgbGV0IGVudGVyU2lnbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpXG4gICAgbGV0IGNsaWNrSGVyZVNpZ24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKVxuICAgIGxldCBhcmNhZGVPcGVuU2lnbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpXG4gICAgbGV0IGNsaWNrQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICBsZXQgbXV0ZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tdXRlLWJ1dHRvbicpXG4gICAgZW50ZXJTaWduLnNldEF0dHJpYnV0ZSgnc3JjJywgJy4vaW1hZ2VzL21haW5QYWdlL25lb25fZW50ZXJfc2lnbi5naWYnKVxuICAgIGNsaWNrSGVyZVNpZ24uc2V0QXR0cmlidXRlKCdzcmMnLCAnLi9pbWFnZXMvbWFpblBhZ2UvbmVvbl9jbGlja19oZXJlLmdpZicpXG4gICAgYXJjYWRlT3BlblNpZ24uc2V0QXR0cmlidXRlKCdzcmMnLCAnLi9pbWFnZXMvbWFpblBhZ2UvYXJjYWRlU2lnbi5naWYnKVxuICAgIGVudGVyU2lnbi5jbGFzc0xpc3QuYWRkKCdlbnRlci1zaWduJylcbiAgICBhcmNhZGVPcGVuU2lnbi5jbGFzc0xpc3QuYWRkKCdhcmNhZGUtb3Blbi1zaWduJylcbiAgICBjbGlja0hlcmVTaWduLmNsYXNzTGlzdC5hZGQoJ2NsaWNrLWhlcmUtc2lnbicpXG4gICAgY2xpY2tDb250YWluZXIuY2xhc3NMaXN0LmFkZCgnY2xpY2stY29udGFpbmVyJylcbiAgICBiYWNrZ3JvdW5kQ29udGFpbmVyLmFwcGVuZENoaWxkKGFyY2FkZU9wZW5TaWduKVxuICAgIGNsaWNrQ29udGFpbmVyLmFwcGVuZENoaWxkKGVudGVyU2lnbilcbiAgICBjbGlja0NvbnRhaW5lci5hcHBlbmRDaGlsZChjbGlja0hlcmVTaWduKVxuICAgIGJhY2tncm91bmRDb250YWluZXIuYXBwZW5kQ2hpbGQoY2xpY2tDb250YWluZXIpXG4gICAgbGV0IGdhbWU7XG5cblxuICAgIG11dGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lciggJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgaWYobXV0ZUJ1dHRvbi52YWx1ZSA9PT0gJ211dGUnKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgIH0pXG5cbiAgICBjbGlja0NvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCAnY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICAvL2hpZGUgbmVvbiBzaWduc1xuICAgICAgICBjbGlja0NvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gICAgICAgIGNsaWNrSGVyZVNpZ24uc3R5bGUuZGlzcGxheSA9J25vbmUnXG4gICAgICAgIGVudGVyU2lnbi5zdHlsZS5kaXNwbGF5ID0nbm9uZSdcbiAgICAgICAgYXJjYWRlT3BlblNpZ24uc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuICAgICAgICBlbnRlckdhbWVDaGVja2JveC5jaGVja2VkID0gdHJ1ZTtcblxuXG4gICAgICAgIC8vIERpc3BsYXkgR2FtZSBTY3JlZW4gYWZ0ZXIgem9vbSBhbmltYXRpb25cbiAgICAgICAgc2V0VGltZW91dCggKCkgPT4ge1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbnRhaW5lci5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSBcInVybCgnLi9pbWFnZXMvbWFpblBhZ2UvYXJjYWRlX3NjcmVlbl9iYWNrZ3JvdW5kLmpwZycpXCJcbiAgICAgICAgICAgIGJhY2tncm91bmRDb250YWluZXIuc3R5bGUuYmFja2dyb3VuZFNpemUgPSAnY29udGFpbidcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYW52YXMtY29udGFpbmVyJykuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcbiAgICAgICAgICAgIGxldCBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2FtZS1jYW52YXMnKSBcbiAgICAgICAgICAgIGdhbWUgPSBuZXcgR2FtZShjYW52YXMpO1xuICAgICAgICAgICAgZW50ZXJHYW1lQ2hlY2tib3guY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICBcbiAgICBcbiAgIFxuXG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGUpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhlLmNvZGUpXG4gICAgICAgICAgICAgICAgbGV0IGNvbW1hbmQgPSBPYmplY3Qua2V5cyhnYW1lLm9wdGlvbnMuY29udHJvbHMpLmZpbHRlcigga2V5ID0+IGdhbWUub3B0aW9ucy5jb250cm9sc1trZXldID09PSBlLmNvZGUpXG4gICAgICAgICAgICAgICAgaWYgKGNvbW1hbmQubGVuZ3RoKSBnYW1lLnNldEtleURvd24oY29tbWFuZFswXSk7XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGNvbW1hbmQgPSBPYmplY3Qua2V5cyhnYW1lLm9wdGlvbnMuY29udHJvbHMpLmZpbHRlcigga2V5ID0+IGdhbWUub3B0aW9ucy5jb250cm9sc1trZXldID09PSBlLmNvZGUpXG4gICAgICAgICAgICAgICAgaWYgKGNvbW1hbmQubGVuZ3RoKSBnYW1lLnNldEtleVVwKGNvbW1hbmRbMF0pO1xuICAgICAgICB9KVxuICAgICAgICB9LCA1MDAwKTtcbiAgICB9KVxufSlcblxuIl0sIm5hbWVzIjpbIkhvd2wiLCJIb3dsZXIiLCJHYW1lIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiYmFja2dyb3VuZENvbnRhaW5lciIsInF1ZXJ5U2VsZWN0b3IiLCJlbnRlckdhbWVDaGVja2JveCIsImVudGVyU2lnbiIsImNyZWF0ZUVsZW1lbnQiLCJjbGlja0hlcmVTaWduIiwiYXJjYWRlT3BlblNpZ24iLCJjbGlja0NvbnRhaW5lciIsIm11dGVCdXR0b24iLCJzZXRBdHRyaWJ1dGUiLCJjbGFzc0xpc3QiLCJhZGQiLCJhcHBlbmRDaGlsZCIsImdhbWUiLCJlIiwidmFsdWUiLCJzdHlsZSIsImRpc3BsYXkiLCJjaGVja2VkIiwic2V0VGltZW91dCIsImJhY2tncm91bmRJbWFnZSIsImJhY2tncm91bmRTaXplIiwiY2FudmFzIiwiZ2V0RWxlbWVudEJ5SWQiLCJjb21tYW5kIiwiT2JqZWN0Iiwia2V5cyIsIm9wdGlvbnMiLCJjb250cm9scyIsImZpbHRlciIsImtleSIsImNvZGUiLCJsZW5ndGgiLCJzZXRLZXlEb3duIiwic2V0S2V5VXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/lifebar.js":
/*!************************!*\
  !*** ./src/lifebar.js ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LifeBar\": function() { return /* binding */ LifeBar; }\n/* harmony export */ });\nclass LifeBar {\n  constructor(ctx, dimensions, owner) {\n    this.ctx = ctx;\n    this.dimensions = dimensions;\n    this.owner = owner;\n    this.health = 100;\n  }\n\n  reduceHealth(amount) {\n    this.health -= amount;\n    if (this.health < 0) this.health = 0;\n  }\n\n  increaseHealth(amount) {} // drawLifebar() {\n  //     this.ctx.fillStyle = 'yellow';\n  //     this.ctx.fillRect(this.getPosition(), 40, this.dimensions.width/2 - 120, 30)\n  //     this.ctx.fillStyle = 'red'\n  //     this.ctx.fillRect(this.getPosition(), 40, ((100-this.health)/100)*(this.dimensions.width/2 - 120), 30)\n  //     this.ctx.fillStyle = 'black'\n  //     this.ctx.font = '20px Arial';\n  //     if(this.lifeBarSide === 'left') {\n  //         this.ctx.fillText(`Player Health`, 80, 60);\n  //     } else {\n  //         this.ctx.fillText('Enemy Health', this.dimensions.width/1.6 + 80, 60)\n  //     }\n  // }\n\n\n  drawLifebar() {\n    if (this.owner.model === 'knight') {\n      this.ctx.fillStyle = 'yellow';\n      this.ctx.fillRect(10, 20, this.dimensions.width / 2 - 120, 30);\n      this.ctx.fillStyle = 'red';\n      this.ctx.fillRect(10, 20, (100 - this.health) / 100 * (this.dimensions.width / 2 - 120), 30);\n      this.ctx.font = '25px Sans-serif';\n      this.ctx.fillStyle = 'black';\n      this.ctx.lineWidth = 2;\n      this.ctx.fillText(`Player Health`, 100, 42);\n    } else {\n      this.ctx.fillStyle = 'yellow';\n      this.ctx.fillRect(this.owner.position[0] - 10, this.owner.position[1] - 20, this.owner.size.width + 20, 5);\n      this.ctx.fillStyle = 'red';\n      this.ctx.fillRect(this.owner.position[0] - 10, this.owner.position[1] - 20, (100 - this.health) / 100 * (this.owner.size.width + 20), 5);\n    }\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbGlmZWJhci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsT0FBTixDQUFjO0FBQ2pCQyxFQUFBQSxXQUFXLENBQUNDLEdBQUQsRUFBTUMsVUFBTixFQUFrQkMsS0FBbEIsRUFBMEI7QUFDakMsU0FBS0YsR0FBTCxHQUFXQSxHQUFYO0FBQ0EsU0FBS0MsVUFBTCxHQUFrQkEsVUFBbEI7QUFDQSxTQUFLQyxLQUFMLEdBQWFBLEtBQWI7QUFDQSxTQUFLQyxNQUFMLEdBQWMsR0FBZDtBQUNIOztBQUVEQyxFQUFBQSxZQUFZLENBQUNDLE1BQUQsRUFBUztBQUNqQixTQUFLRixNQUFMLElBQWVFLE1BQWY7QUFDQSxRQUFHLEtBQUtGLE1BQUwsR0FBYyxDQUFqQixFQUFvQixLQUFLQSxNQUFMLEdBQWMsQ0FBZDtBQUN2Qjs7QUFFREcsRUFBQUEsY0FBYyxDQUFDRCxNQUFELEVBQVMsQ0FFdEIsQ0FmZ0IsQ0FpQmpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQUUsRUFBQUEsV0FBVyxHQUFHO0FBQ1YsUUFBRyxLQUFLTCxLQUFMLENBQVdNLEtBQVgsS0FBcUIsUUFBeEIsRUFBa0M7QUFDOUIsV0FBS1IsR0FBTCxDQUFTUyxTQUFULEdBQXFCLFFBQXJCO0FBQ0EsV0FBS1QsR0FBTCxDQUFTVSxRQUFULENBQWtCLEVBQWxCLEVBQXNCLEVBQXRCLEVBQTBCLEtBQUtULFVBQUwsQ0FBZ0JVLEtBQWhCLEdBQXNCLENBQXRCLEdBQTBCLEdBQXBELEVBQXlELEVBQXpEO0FBQ0EsV0FBS1gsR0FBTCxDQUFTUyxTQUFULEdBQXFCLEtBQXJCO0FBQ0EsV0FBS1QsR0FBTCxDQUFTVSxRQUFULENBQWtCLEVBQWxCLEVBQXNCLEVBQXRCLEVBQTJCLENBQUMsTUFBSSxLQUFLUCxNQUFWLElBQWtCLEdBQW5CLElBQXlCLEtBQUtGLFVBQUwsQ0FBZ0JVLEtBQWhCLEdBQXNCLENBQXRCLEdBQTBCLEdBQW5ELENBQTFCLEVBQW1GLEVBQW5GO0FBQ0EsV0FBS1gsR0FBTCxDQUFTWSxJQUFULEdBQWdCLGlCQUFoQjtBQUNBLFdBQUtaLEdBQUwsQ0FBU1MsU0FBVCxHQUFxQixPQUFyQjtBQUNBLFdBQUtULEdBQUwsQ0FBU2EsU0FBVCxHQUFxQixDQUFyQjtBQUNBLFdBQUtiLEdBQUwsQ0FBU2MsUUFBVCxDQUFtQixlQUFuQixFQUFtQyxHQUFuQyxFQUF3QyxFQUF4QztBQUNILEtBVEQsTUFTTztBQUNILFdBQUtkLEdBQUwsQ0FBU1MsU0FBVCxHQUFxQixRQUFyQjtBQUNBLFdBQUtULEdBQUwsQ0FBU1UsUUFBVCxDQUFrQixLQUFLUixLQUFMLENBQVdhLFFBQVgsQ0FBb0IsQ0FBcEIsSUFBeUIsRUFBM0MsRUFBK0MsS0FBS2IsS0FBTCxDQUFXYSxRQUFYLENBQW9CLENBQXBCLElBQXlCLEVBQXhFLEVBQTZFLEtBQUtiLEtBQUwsQ0FBV2MsSUFBWCxDQUFnQkwsS0FBaEIsR0FBd0IsRUFBckcsRUFBeUcsQ0FBekc7QUFDQSxXQUFLWCxHQUFMLENBQVNTLFNBQVQsR0FBcUIsS0FBckI7QUFDQSxXQUFLVCxHQUFMLENBQVNVLFFBQVQsQ0FBa0IsS0FBS1IsS0FBTCxDQUFXYSxRQUFYLENBQW9CLENBQXBCLElBQXlCLEVBQTNDLEVBQStDLEtBQUtiLEtBQUwsQ0FBV2EsUUFBWCxDQUFvQixDQUFwQixJQUF5QixFQUF4RSxFQUE2RSxDQUFDLE1BQUksS0FBS1osTUFBVixJQUFrQixHQUFuQixJQUF5QixLQUFLRCxLQUFMLENBQVdjLElBQVgsQ0FBZ0JMLEtBQWhCLEdBQXdCLEVBQWpELENBQTVFLEVBQWtJLENBQWxJO0FBRUg7QUFFSjs7QUFsRGdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYUFfSlNfUHJvamVjdC8uL3NyYy9saWZlYmFyLmpzP2UyZGYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIExpZmVCYXIge1xuICAgIGNvbnN0cnVjdG9yKGN0eCwgZGltZW5zaW9ucywgb3duZXIgKSB7XG4gICAgICAgIHRoaXMuY3R4ID0gY3R4O1xuICAgICAgICB0aGlzLmRpbWVuc2lvbnMgPSBkaW1lbnNpb25zXG4gICAgICAgIHRoaXMub3duZXIgPSBvd25lclxuICAgICAgICB0aGlzLmhlYWx0aCA9IDEwMDtcbiAgICB9XG5cbiAgICByZWR1Y2VIZWFsdGgoYW1vdW50KSB7XG4gICAgICAgIHRoaXMuaGVhbHRoIC09IGFtb3VudDtcbiAgICAgICAgaWYodGhpcy5oZWFsdGggPCAwKSB0aGlzLmhlYWx0aCA9IDA7XG4gICAgfVxuXG4gICAgaW5jcmVhc2VIZWFsdGgoYW1vdW50KSB7XG5cbiAgICB9XG5cbiAgICAvLyBkcmF3TGlmZWJhcigpIHtcbiAgICAvLyAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gJ3llbGxvdyc7XG4gICAgLy8gICAgIHRoaXMuY3R4LmZpbGxSZWN0KHRoaXMuZ2V0UG9zaXRpb24oKSwgNDAsIHRoaXMuZGltZW5zaW9ucy53aWR0aC8yIC0gMTIwLCAzMClcbiAgICAvLyAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gJ3JlZCdcbiAgICAvLyAgICAgdGhpcy5jdHguZmlsbFJlY3QodGhpcy5nZXRQb3NpdGlvbigpLCA0MCwgKCgxMDAtdGhpcy5oZWFsdGgpLzEwMCkqKHRoaXMuZGltZW5zaW9ucy53aWR0aC8yIC0gMTIwKSwgMzApXG4gICAgLy8gICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9ICdibGFjaydcbiAgICAvLyAgICAgdGhpcy5jdHguZm9udCA9ICcyMHB4IEFyaWFsJztcbiAgICAvLyAgICAgaWYodGhpcy5saWZlQmFyU2lkZSA9PT0gJ2xlZnQnKSB7XG4gICAgLy8gICAgICAgICB0aGlzLmN0eC5maWxsVGV4dChgUGxheWVyIEhlYWx0aGAsIDgwLCA2MCk7XG4gICAgLy8gICAgIH0gZWxzZSB7XG4gICAgLy8gICAgICAgICB0aGlzLmN0eC5maWxsVGV4dCgnRW5lbXkgSGVhbHRoJywgdGhpcy5kaW1lbnNpb25zLndpZHRoLzEuNiArIDgwLCA2MClcbiAgICAvLyAgICAgfVxuICAgIC8vIH1cbiAgIFxuXG4gICAgZHJhd0xpZmViYXIoKSB7XG4gICAgICAgIGlmKHRoaXMub3duZXIubW9kZWwgPT09ICdrbmlnaHQnKSB7XG4gICAgICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSAneWVsbG93JztcbiAgICAgICAgICAgIHRoaXMuY3R4LmZpbGxSZWN0KDEwLCAyMCwgdGhpcy5kaW1lbnNpb25zLndpZHRoLzIgLSAxMjAsIDMwKVxuICAgICAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gJ3JlZCdcbiAgICAgICAgICAgIHRoaXMuY3R4LmZpbGxSZWN0KDEwLCAyMCwgKCgxMDAtdGhpcy5oZWFsdGgpLzEwMCkqKHRoaXMuZGltZW5zaW9ucy53aWR0aC8yIC0gMTIwKSwgMzApXG4gICAgICAgICAgICB0aGlzLmN0eC5mb250ID0gJzI1cHggU2Fucy1zZXJpZic7XG4gICAgICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSAnYmxhY2snXG4gICAgICAgICAgICB0aGlzLmN0eC5saW5lV2lkdGggPSAyO1xuICAgICAgICAgICAgdGhpcy5jdHguZmlsbFRleHQoYFBsYXllciBIZWFsdGhgLCAxMDAsIDQyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9ICd5ZWxsb3cnO1xuICAgICAgICAgICAgdGhpcy5jdHguZmlsbFJlY3QodGhpcy5vd25lci5wb3NpdGlvblswXSAtIDEwLCB0aGlzLm93bmVyLnBvc2l0aW9uWzFdIC0gMjAsICB0aGlzLm93bmVyLnNpemUud2lkdGggKyAyMCwgNSlcbiAgICAgICAgICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9ICdyZWQnXG4gICAgICAgICAgICB0aGlzLmN0eC5maWxsUmVjdCh0aGlzLm93bmVyLnBvc2l0aW9uWzBdIC0gMTAsIHRoaXMub3duZXIucG9zaXRpb25bMV0gLSAyMCwgKCgxMDAtdGhpcy5oZWFsdGgpLzEwMCkqKHRoaXMub3duZXIuc2l6ZS53aWR0aCArIDIwKSwgNSlcblxuICAgICAgICB9XG4gICAgICBcbiAgICB9XG5cbn0iXSwibmFtZXMiOlsiTGlmZUJhciIsImNvbnN0cnVjdG9yIiwiY3R4IiwiZGltZW5zaW9ucyIsIm93bmVyIiwiaGVhbHRoIiwicmVkdWNlSGVhbHRoIiwiYW1vdW50IiwiaW5jcmVhc2VIZWFsdGgiLCJkcmF3TGlmZWJhciIsIm1vZGVsIiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJ3aWR0aCIsImZvbnQiLCJsaW5lV2lkdGgiLCJmaWxsVGV4dCIsInBvc2l0aW9uIiwic2l6ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/lifebar.js\n");

/***/ }),

/***/ "./src/menu_option.js":
/*!****************************!*\
  !*** ./src/menu_option.js ***!
  \****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MenuOption\": function() { return /* binding */ MenuOption; }\n/* harmony export */ });\nclass MenuOption {\n  constructor(optionText, position, selectedAction, selectedStatus = false) {\n    this.optionText = optionText;\n    this.selectedStatus = selectedStatus;\n    this.selectedAction = selectedAction;\n    this.position = position;\n  }\n\n  draw(ctx) {\n    // console.log(this.selectedStatus)\n    ctx.fillStyle = this.selectedStatus ? 'yellow' : 'red';\n    ctx.font = '30px Comic Sans MS';\n    ctx.fillText(`${this.optionText}`, this.position[0], this.position[1]);\n  }\n\n  toggleHighlight() {\n    this.selectedStatus === true ? this.selectedStatus = false : this.selectedStatus = true;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbWVudV9vcHRpb24uanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLFVBQU4sQ0FBaUI7QUFDcEJDLEVBQUFBLFdBQVcsQ0FBQ0MsVUFBRCxFQUFhQyxRQUFiLEVBQXVCQyxjQUF2QixFQUF1Q0MsY0FBYyxHQUFHLEtBQXhELEVBQStEO0FBQ3RFLFNBQUtILFVBQUwsR0FBa0JBLFVBQWxCO0FBQ0EsU0FBS0csY0FBTCxHQUFzQkEsY0FBdEI7QUFDQSxTQUFLRCxjQUFMLEdBQXNCQSxjQUF0QjtBQUNBLFNBQUtELFFBQUwsR0FBZ0JBLFFBQWhCO0FBQ0g7O0FBRURHLEVBQUFBLElBQUksQ0FBQ0MsR0FBRCxFQUFNO0FBQ047QUFDQUEsSUFBQUEsR0FBRyxDQUFDQyxTQUFKLEdBQWdCLEtBQUtILGNBQUwsR0FBc0IsUUFBdEIsR0FBaUMsS0FBakQ7QUFDQUUsSUFBQUEsR0FBRyxDQUFDRSxJQUFKLEdBQVcsb0JBQVg7QUFDQUYsSUFBQUEsR0FBRyxDQUFDRyxRQUFKLENBQWMsR0FBRSxLQUFLUixVQUFXLEVBQWhDLEVBQW1DLEtBQUtDLFFBQUwsQ0FBYyxDQUFkLENBQW5DLEVBQXFELEtBQUtBLFFBQUwsQ0FBYyxDQUFkLENBQXJEO0FBQ0g7O0FBRURRLEVBQUFBLGVBQWUsR0FBRztBQUNkLFNBQUtOLGNBQUwsS0FBd0IsSUFBeEIsR0FBK0IsS0FBS0EsY0FBTCxHQUFzQixLQUFyRCxHQUE2RCxLQUFLQSxjQUFMLEdBQXNCLElBQW5GO0FBQ0g7O0FBakJtQiIsInNvdXJjZXMiOlsid2VicGFjazovL2FBX0pTX1Byb2plY3QvLi9zcmMvbWVudV9vcHRpb24uanM/OGNmNyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgTWVudU9wdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9uVGV4dCwgcG9zaXRpb24sIHNlbGVjdGVkQWN0aW9uLCBzZWxlY3RlZFN0YXR1cyA9IGZhbHNlKSB7XG4gICAgICAgIHRoaXMub3B0aW9uVGV4dCA9IG9wdGlvblRleHQ7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRTdGF0dXMgPSBzZWxlY3RlZFN0YXR1cztcbiAgICAgICAgdGhpcy5zZWxlY3RlZEFjdGlvbiA9IHNlbGVjdGVkQWN0aW9uO1xuICAgICAgICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb247IFxuICAgIH1cblxuICAgIGRyYXcoY3R4KSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuc2VsZWN0ZWRTdGF0dXMpXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLnNlbGVjdGVkU3RhdHVzID8gJ3llbGxvdycgOiAncmVkJ1xuICAgICAgICBjdHguZm9udCA9ICczMHB4IENvbWljIFNhbnMgTVMnO1xuICAgICAgICBjdHguZmlsbFRleHQoYCR7dGhpcy5vcHRpb25UZXh0fWAsIHRoaXMucG9zaXRpb25bMF0sIHRoaXMucG9zaXRpb25bMV0pO1xuICAgIH1cblxuICAgIHRvZ2dsZUhpZ2hsaWdodCgpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZFN0YXR1cyA9PT0gdHJ1ZSA/IHRoaXMuc2VsZWN0ZWRTdGF0dXMgPSBmYWxzZSA6IHRoaXMuc2VsZWN0ZWRTdGF0dXMgPSB0cnVlOyBcbiAgICB9XG59Il0sIm5hbWVzIjpbIk1lbnVPcHRpb24iLCJjb25zdHJ1Y3RvciIsIm9wdGlvblRleHQiLCJwb3NpdGlvbiIsInNlbGVjdGVkQWN0aW9uIiwic2VsZWN0ZWRTdGF0dXMiLCJkcmF3IiwiY3R4IiwiZmlsbFN0eWxlIiwiZm9udCIsImZpbGxUZXh0IiwidG9nZ2xlSGlnaGxpZ2h0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/menu_option.js\n");

/***/ }),

/***/ "./src/options.js":
/*!************************!*\
  !*** ./src/options.js ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Options\": function() { return /* binding */ Options; }\n/* harmony export */ });\nclass Options {\n  constructor() {\n    this.controls = {\n      up: 'KeyW',\n      down: 'KeyS',\n      left: 'KeyA',\n      right: 'KeyD',\n      lAttack: 'KeyJ',\n      hAttack: 'KeyK',\n      throw: 'KeyL',\n      jump: 'Space'\n    };\n    this.difficulty = 'easy';\n    this.stage = 'random';\n    this.sound = 'on';\n    this.volume = {\n      BGM: .5,\n      SFX: .5\n    };\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvb3B0aW9ucy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsT0FBTixDQUFjO0FBQ2pCQyxFQUFBQSxXQUFXLEdBQUc7QUFDVixTQUFLQyxRQUFMLEdBQWdCO0FBQ0lDLE1BQUFBLEVBQUUsRUFBRSxNQURSO0FBRUlDLE1BQUFBLElBQUksRUFBRSxNQUZWO0FBR0lDLE1BQUFBLElBQUksRUFBRSxNQUhWO0FBSUlDLE1BQUFBLEtBQUssRUFBRSxNQUpYO0FBS0lDLE1BQUFBLE9BQU8sRUFBRSxNQUxiO0FBTUlDLE1BQUFBLE9BQU8sRUFBRSxNQU5iO0FBT0lDLE1BQUFBLEtBQUssRUFBRSxNQVBYO0FBUUlDLE1BQUFBLElBQUksRUFBRTtBQVJWLEtBQWhCO0FBVUEsU0FBS0MsVUFBTCxHQUFrQixNQUFsQjtBQUNBLFNBQUtDLEtBQUwsR0FBYSxRQUFiO0FBQ0EsU0FBS0MsS0FBTCxHQUFhLElBQWI7QUFDQSxTQUFLQyxNQUFMLEdBQWM7QUFBRUMsTUFBQUEsR0FBRyxFQUFFLEVBQVA7QUFDRUMsTUFBQUEsR0FBRyxFQUFFO0FBRFAsS0FBZDtBQUdIOztBQWxCZ0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hQV9KU19Qcm9qZWN0Ly4vc3JjL29wdGlvbnMuanM/NGM2YiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgT3B0aW9ucyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuY29udHJvbHMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXA6ICdLZXlXJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3duOiAnS2V5UycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogJ0tleUEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAnS2V5RCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbEF0dGFjazogJ0tleUonLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhBdHRhY2s6ICdLZXlLJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdzogJ0tleUwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGp1bXA6ICdTcGFjZSdcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgIHRoaXMuZGlmZmljdWx0eSA9ICdlYXN5JztcbiAgICAgICAgdGhpcy5zdGFnZSA9ICdyYW5kb20nO1xuICAgICAgICB0aGlzLnNvdW5kID0gJ29uJztcbiAgICAgICAgdGhpcy52b2x1bWUgPSB7IEJHTTogLjUsXG4gICAgICAgICAgICAgICAgICAgICAgICBTRlg6IC41XG4gICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICB9XG59Il0sIm5hbWVzIjpbIk9wdGlvbnMiLCJjb25zdHJ1Y3RvciIsImNvbnRyb2xzIiwidXAiLCJkb3duIiwibGVmdCIsInJpZ2h0IiwibEF0dGFjayIsImhBdHRhY2siLCJ0aHJvdyIsImp1bXAiLCJkaWZmaWN1bHR5Iiwic3RhZ2UiLCJzb3VuZCIsInZvbHVtZSIsIkJHTSIsIlNGWCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/options.js\n");

/***/ }),

/***/ "./src/playerCharacter.js":
/*!********************************!*\
  !*** ./src/playerCharacter.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PlayerCharacter\": function() { return /* binding */ PlayerCharacter; }\n/* harmony export */ });\n/* harmony import */ var _character__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./character */ \"./src/character.js\");\n\nclass PlayerCharacter extends _character__WEBPACK_IMPORTED_MODULE_0__.Character {\n  constructor(game) {\n    super(game, [30, 450], 'knight', 'right', {\n      height: 110,\n      width: 40\n    });\n    this.blockGuage = 100;\n    this.blockStatus = false; //false if not blocking\n\n    this.score = 0;\n    this.jumpVel = 0;\n    this.jumpHeight = 0;\n    this.moveLockOut = false;\n    this.moveSpeed = 1;\n  }\n\n  HIT_SOUNDS = ['./sounds/player_sounds/hit/pain1.wav', './sounds/player_sounds/hit/pain2.wav', './sounds/player_sounds/hit/pain3.wav'];\n  ATTACK_SOUNDS = ['./sounds/player_sounds/lAttack/hammer-1a.wav', './sounds/player_sounds/lAttack/hammer-1b.wav', './sounds/player_sounds/lAttack/sword-arm-2a.wav', './sounds/player_sounds/lAttack/sword-arm-2b.wav'];\n  RUN_SOUNDS = ['./sounds/player_sounds/move/step_metal1.ogg', './sounds/player_sounds/move/step_metal2.ogg', './sounds/player_sounds/move/step_metal3.ogg', './sounds/player_sounds/move/step_metal4.ogg'];\n\n  lockOutMove() {\n    this.moveLockOut = true;\n    setTimeout(() => this.moveLockOut = false, 50);\n  }\n\n  move() {\n    //reduce velocity of everything not pressed\n    if (this.currentAction !== 'jump' && this.currentAnimation !== 'death' && !this.stunned) {\n      if (!this.game.controller.up && this.yVel < 0) this.yVel += this.moveSpeed;\n      if (!this.game.controller.down && this.yVel > 0) this.yVel -= this.moveSpeed;\n      if (!this.game.controller.left && this.xVel < 0) this.xVel += this.moveSpeed;\n      if (!this.game.controller.right && this.xVel > 0) this.xVel -= this.moveSpeed; //increase velocity of everything pressed\n\n      if (!this.moveLockOut) {\n        if (this.game.controller.up) {\n          //check if moving opp direction and not still pressing.  reset if so\n          if (!this.game.controller.down && this.yVel > 0) this.yVel = 0;\n          this.dashDirection = null;\n          if (this.yVel > -5) this.yVel -= this.moveSpeed;\n        }\n\n        if (this.game.controller.down) {\n          if (!this.game.controller.up && this.yVel < 0) this.yVel = 0;\n          this.dashDirection = null;\n          if (this.yVel < 5) this.yVel += this.moveSpeed;\n        }\n\n        if (this.game.controller.left) {\n          if (!this.game.controller.right && this.xVel > 0) this.xVel = 0;\n          if (this.dashDirection === 'right') this.dashDirection === null;\n\n          if (this.xVel > -5 || this.dashDirection === 'left' && this.xVel > -15) {\n            this.xVel -= this.moveSpeed;\n          }\n        }\n\n        if (this.game.controller.right) {\n          if (!this.game.controller.left && this.xVel < 0) this.xVel = 0;\n          if (this.dashDirection === 'left') this.dashDirection === null;\n\n          if (this.xVel < 5 || this.dashDirection === 'right' && this.xVel < 15) {\n            this.xVel += this.moveSpeed;\n          }\n        }\n      }\n    }\n\n    this.updateNewPos();\n    this.lockOutMove();\n  }\n\n  performAction(inputs) {\n    if (!this.currentAction) {\n      if (inputs.lAttack) {\n        this.getAttackSound();\n        this.performLightAttack();\n      } else if (inputs.hAttack) {\n        this.performHeavyAttack();\n      } else if (inputs.jump) {\n        this.jump();\n      } else if (inputs.throw) {\n        this.performThrow();\n      }\n    }\n  }\n\n  updateNewPos() {\n    let prevPos = this.position.slice();\n\n    if (this.stunned) {\n      this.xVel = 0;\n      this.yVel = 0;\n    }\n\n    if (this.checkXInbounds(this.position[0] + this.xVel)) {\n      this.position[0] += this.xVel;\n    }\n\n    if (this.currentAction !== 'jump') {\n      if (this.checkYInbounds(this.position[1] + this.yVel)) {\n        this.position[1] += this.yVel;\n      }\n\n      if (prevPos[0] !== this.position[0] || prevPos[1] !== this.position[1]) {\n        this.getRunSound();\n      }\n    } else {\n      //if before apex\n      if (this.yVel < 0) {\n        this.position[1] += this.yVel;\n        this.jumpHeight -= this.yVel;\n        this.yVel += 2.5;\n      } else {\n        if (this.jumpHeight - this.yVel < 0) {\n          this.position[1] += this.jumpHeight;\n          this.jumpHeight = 0;\n          this.yVel = 0;\n          this.xVel = 0;\n        } else {\n          this.position[1] += this.yVel;\n          this.jumpHeight -= this.yVel;\n          this.yVel += 2.5;\n        }\n      }\n\n      if (this.yVel === 0 && this.jumpHeight === 0) this.currentAction = null;\n    }\n\n    let prevDirection = this.directionFaced;\n    if (this.xVel > 0) this.directionFaced = 'right';\n    if (this.xVel < 0) this.directionFaced = 'left';\n    if (prevDirection !== this.directionFaced) this.resetCurrentFrame();\n  }\n\n  jump() {\n    this.currentAction = 'jump';\n    this.yVel -= 40;\n\n    if (this.game.controller.left && !this.game.controller.right) {\n      this.xVel = -10;\n    }\n\n    if (this.game.controller.right && !this.game.controller.left) {\n      this.xVel = 10;\n    }\n  } //command sent all the way from game class keyUp(). janky, maybe fix\n\n\n  dash(direction) {\n    this.dashDirection = direction;\n  }\n\n  getRunSound() {\n    if (!this.runSoundTimeOut) {\n      this.runSoundTimeOut = true;\n      setTimeout(() => this.runSoundTimeOut = false, 700);\n\n      if (this.game.options.sound === 'on') {\n        var sound = new Howl({\n          src: ['./sounds/player_sounds/move/steps_platform.ogg']\n        });\n        sound.volume(this.game.options.volume.SFX * .1);\n        sound.play();\n      }\n    }\n  }\n\n  getAttackSound() {\n    if (!this.currentAttackSound) this.currentAttackSound = 0;\n\n    if (this.game.options.sound === 'on') {\n      var sound = new Howl({\n        src: [this.ATTACK_SOUNDS[this.currentAttackSound]]\n      });\n      sound.volume(this.game.options.volume.SFX * .1);\n      sound.play();\n    }\n\n    this.currentAttackSound++;\n    this.currentAttackSound = this.currentAttackSound % this.ATTACK_SOUNDS.length;\n  }\n\n  getHitSound() {\n    if (!this.currentHitSound) this.currentHitSound = 0;\n\n    if (this.game.options.sound === 'on') {\n      var sound = new Howl({\n        src: [this.HIT_SOUNDS[this.currentHitSound]]\n      });\n      sound.volume(this.game.options.volume.SFX * .1);\n      sound.play();\n    }\n\n    this.currentHitSound++;\n    this.currentHitSound = this.currentHitSound % this.ATTACK_SOUNDS.length;\n  }\n\n  getDeathSound() {\n    if (this.game.options.sound === 'on') {\n      var sound = new Howl({\n        src: ['./sounds/player_sounds/death/die2.wav']\n      });\n      sound.volume(this.game.options.volume.SFX * .1);\n      sound.play();\n    }\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/playerCharacter.js\n");

/***/ }),

/***/ "./src/score.js":
/*!**********************!*\
  !*** ./src/score.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Score\": function() { return /* binding */ Score; }\n/* harmony export */ });\nclass Score {\n  constructor(ctx, dimensions, timer) {\n    this.timer = timer;\n    this.dimensions = dimensions;\n    this.ctx = ctx;\n    this.score = 0;\n  }\n\n  increaseScore(enemy) {\n    let multiplier = 1 + Math.floor(this.timer.time / 20);\n    this.score += enemy.scoreBase * multiplier;\n  }\n\n  draw() {\n    this.ctx.font = '40px Sans-serif';\n    this.ctx.strokeStyle = 'black';\n    this.ctx.lineWidth = 8;\n    this.ctx.fillStyle = 'yellow';\n    this.ctx.strokeText('SCORE', this.dimensions.width / 1.4, 40);\n    this.ctx.fillText('SCORE', this.dimensions.width / 1.4, 40);\n    this.ctx.font = '40px Sans-serif';\n    this.ctx.strokeText(this.score, this.dimensions.width / 1.1, 40);\n    this.ctx.fillText(this.score, this.dimensions.width / 1.1, 40);\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NvcmUuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLEtBQU4sQ0FBWTtBQUNmQyxFQUFBQSxXQUFXLENBQUNDLEdBQUQsRUFBTUMsVUFBTixFQUFrQkMsS0FBbEIsRUFBeUI7QUFDaEMsU0FBS0EsS0FBTCxHQUFhQSxLQUFiO0FBQ0EsU0FBS0QsVUFBTCxHQUFrQkEsVUFBbEI7QUFDQSxTQUFLRCxHQUFMLEdBQVdBLEdBQVg7QUFDQSxTQUFLRyxLQUFMLEdBQWEsQ0FBYjtBQUNIOztBQUVEQyxFQUFBQSxhQUFhLENBQUNDLEtBQUQsRUFBUTtBQUNqQixRQUFJQyxVQUFVLEdBQUcsSUFBSUMsSUFBSSxDQUFDQyxLQUFMLENBQVcsS0FBS04sS0FBTCxDQUFXTyxJQUFYLEdBQWtCLEVBQTdCLENBQXJCO0FBQ0EsU0FBS04sS0FBTCxJQUFjRSxLQUFLLENBQUNLLFNBQU4sR0FBa0JKLFVBQWhDO0FBQ0g7O0FBRURLLEVBQUFBLElBQUksR0FBRztBQUNILFNBQUtYLEdBQUwsQ0FBU1ksSUFBVCxHQUFnQixpQkFBaEI7QUFDQSxTQUFLWixHQUFMLENBQVNhLFdBQVQsR0FBdUIsT0FBdkI7QUFDQSxTQUFLYixHQUFMLENBQVNjLFNBQVQsR0FBcUIsQ0FBckI7QUFDQSxTQUFLZCxHQUFMLENBQVNlLFNBQVQsR0FBcUIsUUFBckI7QUFDQSxTQUFLZixHQUFMLENBQVNnQixVQUFULENBQW9CLE9BQXBCLEVBQTZCLEtBQUtmLFVBQUwsQ0FBZ0JnQixLQUFoQixHQUFzQixHQUFuRCxFQUF3RCxFQUF4RDtBQUNBLFNBQUtqQixHQUFMLENBQVNrQixRQUFULENBQWtCLE9BQWxCLEVBQTJCLEtBQUtqQixVQUFMLENBQWdCZ0IsS0FBaEIsR0FBc0IsR0FBakQsRUFBc0QsRUFBdEQ7QUFDQSxTQUFLakIsR0FBTCxDQUFTWSxJQUFULEdBQWdCLGlCQUFoQjtBQUNBLFNBQUtaLEdBQUwsQ0FBU2dCLFVBQVQsQ0FBb0IsS0FBS2IsS0FBekIsRUFBZ0MsS0FBS0YsVUFBTCxDQUFnQmdCLEtBQWhCLEdBQXNCLEdBQXRELEVBQTJELEVBQTNEO0FBQ0EsU0FBS2pCLEdBQUwsQ0FBU2tCLFFBQVQsQ0FBa0IsS0FBS2YsS0FBdkIsRUFBOEIsS0FBS0YsVUFBTCxDQUFnQmdCLEtBQWhCLEdBQXNCLEdBQXBELEVBQXlELEVBQXpEO0FBQ0g7O0FBdkJjIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYUFfSlNfUHJvamVjdC8uL3NyYy9zY29yZS5qcz9iMWFkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBTY29yZSB7XG4gICAgY29uc3RydWN0b3IoY3R4LCBkaW1lbnNpb25zLCB0aW1lcikge1xuICAgICAgICB0aGlzLnRpbWVyID0gdGltZXJcbiAgICAgICAgdGhpcy5kaW1lbnNpb25zID0gZGltZW5zaW9uc1xuICAgICAgICB0aGlzLmN0eCA9IGN0eDtcbiAgICAgICAgdGhpcy5zY29yZSA9IDA7XG4gICAgfVxuXG4gICAgaW5jcmVhc2VTY29yZShlbmVteSkge1xuICAgICAgICBsZXQgbXVsdGlwbGllciA9IDEgKyBNYXRoLmZsb29yKHRoaXMudGltZXIudGltZSAvIDIwKVxuICAgICAgICB0aGlzLnNjb3JlICs9IGVuZW15LnNjb3JlQmFzZSAqIG11bHRpcGxpZXJcbiAgICB9XG5cbiAgICBkcmF3KCkge1xuICAgICAgICB0aGlzLmN0eC5mb250ID0gJzQwcHggU2Fucy1zZXJpZic7XG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZVN0eWxlID0gJ2JsYWNrJztcbiAgICAgICAgdGhpcy5jdHgubGluZVdpZHRoID0gODtcbiAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gJ3llbGxvdyc7XG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZVRleHQoJ1NDT1JFJywgdGhpcy5kaW1lbnNpb25zLndpZHRoLzEuNCwgNDApXG4gICAgICAgIHRoaXMuY3R4LmZpbGxUZXh0KCdTQ09SRScsIHRoaXMuZGltZW5zaW9ucy53aWR0aC8xLjQsIDQwKTtcbiAgICAgICAgdGhpcy5jdHguZm9udCA9ICc0MHB4IFNhbnMtc2VyaWYnO1xuICAgICAgICB0aGlzLmN0eC5zdHJva2VUZXh0KHRoaXMuc2NvcmUsIHRoaXMuZGltZW5zaW9ucy53aWR0aC8xLjEsIDQwKTtcbiAgICAgICAgdGhpcy5jdHguZmlsbFRleHQodGhpcy5zY29yZSwgdGhpcy5kaW1lbnNpb25zLndpZHRoLzEuMSwgNDApO1xuICAgIH1cblxuXG59Il0sIm5hbWVzIjpbIlNjb3JlIiwiY29uc3RydWN0b3IiLCJjdHgiLCJkaW1lbnNpb25zIiwidGltZXIiLCJzY29yZSIsImluY3JlYXNlU2NvcmUiLCJlbmVteSIsIm11bHRpcGxpZXIiLCJNYXRoIiwiZmxvb3IiLCJ0aW1lIiwic2NvcmVCYXNlIiwiZHJhdyIsImZvbnQiLCJzdHJva2VTdHlsZSIsImxpbmVXaWR0aCIsImZpbGxTdHlsZSIsInN0cm9rZVRleHQiLCJ3aWR0aCIsImZpbGxUZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/score.js\n");

/***/ }),

/***/ "./src/stage.js":
/*!**********************!*\
  !*** ./src/stage.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Stage\": function() { return /* binding */ Stage; }\n/* harmony export */ });\n/* harmony import */ var _continueScreen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./continueScreen */ \"./src/continueScreen.js\");\n/* harmony import */ var _cpuCharacter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cpuCharacter */ \"./src/cpuCharacter.js\");\n/* harmony import */ var _playerCharacter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./playerCharacter */ \"./src/playerCharacter.js\");\n/* harmony import */ var _score__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./score */ \"./src/score.js\");\n/* harmony import */ var _timer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./timer */ \"./src/timer.js\");\n\n\n\n\n\nclass Stage {\n  constructor(game) {\n    this.game = game;\n    this.dimensions = game.dimensions;\n    this.floorHeight = game.dimensions.height / 2.2;\n    this.ctx = game.ctx; //list of stages.  eventually probably want to replace with images\n    //list properties: sky-color, ground-color\n\n    this.enemies = [];\n    this.killed_characters = [];\n    this.player = new _playerCharacter__WEBPACK_IMPORTED_MODULE_2__.PlayerCharacter(game);\n    this.timer = new _timer__WEBPACK_IMPORTED_MODULE_4__.Timer(this.ctx, this.dimensions);\n    this.score = new _score__WEBPACK_IMPORTED_MODULE_3__.Score(this.ctx, this.dimensions, this.timer);\n    this.addNewEnemies();\n    this.startMusic();\n    this.gameOver = false; // this.pickStage()\n  }\n\n  startMusic() {\n    if (this.game.options.sound === 'on') {\n      this.sound = new Howl({\n        src: ['./sounds/The_Dark_Amulet.mp3']\n      });\n      this.sound.volume(this.game.options.volume.BGM * .1);\n      this.sound.play();\n    }\n  }\n\n  stopMusic() {\n    this.sound.stop();\n  } // pickStage() {\n  //     let stageNum;\n  //     if (this.game.options.stage === 'random') {\n  //         stageNum = Math.floor(Math.random()  * this.stageList.length)\n  //     } else {\n  //         stageNum = 0 // TODO CHANGE THIS \n  //         /// take stage number/name\n  //     }\n  //     this.stage = this.stageList[stageNum]\n  // }\n\n\n  draw() {\n    if (this.flashScreen) {\n      this.ctx.fillStyle = 'white';\n      this.ctx.fillRect(0, 0, this.dimensions.width, this.dimensions.height);\n      this.flashScreen = false;\n    } else {\n      var img = new Image();\n\n      img.onload = () => {\n        this.ctx.drawImage(img, 0, 0, this.dimensions.width, this.dimensions.height);\n      };\n\n      img.src = './images/gameBackgrounds/stageBackground.png';\n      this.player.drawCharacter();\n      this.player.lifebar.drawLifebar();\n      this.timer.draw();\n      this.score.draw();\n      this.enemies.forEach(enemy => {\n        enemy.drawCharacter();\n        enemy.lifebar.drawLifebar();\n      });\n      this.killed_characters.forEach(killedEnemy => {\n        killedEnemy.drawCharacter();\n        killedEnemy.lifebar.drawLifebar();\n      });\n\n      if (this.gameOver) {\n        if (!this.continueScreen) this.continueScreen = new _continueScreen__WEBPACK_IMPORTED_MODULE_0__.ContinueScreen(this.game);\n        this.continueScreen.draw();\n      }\n    }\n  }\n\n  move(command) {\n    if (this.gameOver) {\n      if (!this.continueScreen) this.continueScreen = new _continueScreen__WEBPACK_IMPORTED_MODULE_0__.ContinueScreen(this.game);\n      this.continueScreen.move(command);\n    } else {\n      this.player.move(command);\n    }\n  }\n\n  performAction(command) {\n    if (this.gameOver) {\n      if (!this.continueScreen) this.continueScreen = new _continueScreen__WEBPACK_IMPORTED_MODULE_0__.ContinueScreen(this.game);\n      this.continueScreen.performAction(command);\n    } else {\n      this.player.performAction(command);\n    }\n  }\n\n  addNewEnemies() {\n    let totalEnemies = 2 + Math.floor(this.timer.time / 20);\n\n    while (this.enemies.length < totalEnemies) {\n      this.generateEnemy();\n    }\n  }\n\n  generateEnemy() {\n    let newEnemy = new _cpuCharacter__WEBPACK_IMPORTED_MODULE_1__.cpuCharacter(this.game, this.getRandomStartPos());\n    this.enemies.push(newEnemy);\n  }\n\n  getRandomStartPos() {\n    let side = Math.floor(Math.random() * 2) === 1 ? 'left' : 'right';\n    let yStart = Math.floor(Math.random() * (this.dimensions.height - this.floorHeight)) + this.floorHeight;\n    let xStart = side === 'left' ? 1000 : -100; // change this to off screen later\n\n    return [xStart, yStart];\n  }\n\n  checkAttacksLanded() {\n    this.checkPlayerAttacks();\n    this.checkEnemyAttack();\n  }\n\n  checkKilledEnemies() {\n    this.enemies.forEach((enemy, i) => {\n      if (enemy.lifebar.health === 0) {\n        this.enemies = this.enemies.slice(0, i).concat(this.enemies.slice(i + 1));\n        this.killed_characters.push(enemy);\n        setTimeout(() => this.killed_characters.shift(), 5000);\n        enemy.death();\n        this.score.increaseScore(enemy);\n      }\n    });\n  }\n\n  checkKilledPlayer() {\n    if (this.player.lifebar.health === 0 && this.player.currentAction !== 'death') {\n      this.killed_characters.push(this.player);\n      setTimeout(() => this.killed_characters.shift(), 5000);\n      this.player.death();\n      this.gameOver = true; // setTimeout( () => this.player = new PlayerCharacter(this.game), 6000);\n    }\n  }\n\n  checkPlayerAttacks() {\n    if (this.player.hitbox.length) {\n      this.enemies.forEach(enemy => {\n        if (this.checkCollision(this.player.hitbox, enemy.calculateHurtBox())) {\n          // console.log('passed collision')\n          switch (this.player.currentAction) {\n            case 'lAttack':\n              if (!enemy.stunned) {\n                enemy.takeDamage(15);\n              }\n\n              break;\n\n            case 'hAttack':\n              enemy.takeDamage(30);\n              break;\n\n            case 'throw':\n              enemy.takeDamage(50);\n              break;\n          }\n        }\n      });\n    }\n  }\n\n  checkEnemyAttack() {\n    this.enemies.forEach(enemy => {\n      if (this.checkCollision(enemy.hitbox, this.player.calculateHurtBox())) {\n        if (!this.player.stunned) {\n          this.player.takeDamage(10);\n        }\n      }\n    });\n  }\n\n  checkCollision(hitbox, hurtbox) {\n    if (hitbox[0] <= hurtbox[0] && hitbox[2] >= hurtbox[0] || hitbox[0] <= hurtbox[2] && hitbox[2] >= hurtbox[2]) {\n      if (hitbox[1] >= hurtbox[1] && hitbox[3] <= hurtbox[1] || hitbox[1] >= hurtbox[3] && hitbox[3] <= hurtbox[3]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  startFlashScreen() {\n    this.flashScreen = true;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/stage.js\n");

/***/ }),

/***/ "./src/start_menu.js":
/*!***************************!*\
  !*** ./src/start_menu.js ***!
  \***************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"StartMenu\": function() { return /* binding */ StartMenu; }\n/* harmony export */ });\n/* harmony import */ var howler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! howler */ \"./node_modules/howler/dist/howler.js\");\n/* harmony import */ var howler__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(howler__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _characterModels__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./characterModels */ \"./src/characterModels.js\");\n/* harmony import */ var _menu_option__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./menu_option */ \"./src/menu_option.js\");\n\n\n\nclass StartMenu {\n  constructor(game) {\n    this.game = game;\n    this.dimensions = game.dimensions;\n    this.ctx = game.ctx;\n    this.createMainMenuOptions();\n    this.menuReady = false;\n    setTimeout(() => this.menuReady = true, 4000);\n    this.lightningReady = true;\n    this.framesDrawn = 0;\n    this.currentFrame = 0;\n    this.startMusic();\n  }\n\n  move(inputs) {\n    if (this.menuReady) {\n      if (inputs.up) {\n        this.menuOptions[this.selectedIdx].toggleHighlight();\n        this.selectedIdx--;\n        if (this.selectedIdx < 0) this.selectedIdx = this.menuOptions.length - 1;\n        this.menuOptions[this.selectedIdx].toggleHighlight();\n        this.lockoutMenu();\n      }\n\n      if (inputs.down) {\n        this.menuOptions[this.selectedIdx].toggleHighlight();\n        this.selectedIdx++;\n        if (this.selectedIdx === this.menuOptions.length) this.selectedIdx = 0;\n        this.menuOptions[this.selectedIdx].toggleHighlight();\n        this.lockoutMenu();\n      }\n\n      if (inputs.left) {}\n\n      if (inputs.right) {}\n    }\n  }\n\n  performAction(inputs) {\n    if (this.menuReady) {\n      if (inputs.lAttack) {\n        this.menuOptions[this.selectedIdx].selectedAction();\n        this.menuReady = false;\n        this.lockoutMenu();\n      } // case 'hAttack':\n\n    }\n  }\n\n  playMenuMoveSound() {\n    if (this.game.options.sound === 'on') {\n      this.sound = new howler__WEBPACK_IMPORTED_MODULE_0__.Howl({\n        src: ['./sounds/menu_sounds/MENU_Pick.wav']\n      });\n      this.sound.volume(this.game.options.volume.SFX * .1);\n      this.sound.play();\n    }\n  }\n\n  lockoutMenu() {\n    if (this.menuReady) {\n      this.playMenuMoveSound();\n      this.menuReady = false;\n      setTimeout(() => this.menuReady = true, 200);\n    } else {\n      setTimeout(() => this.menuReady = true, 4000);\n    }\n  }\n\n  createMainMenuOptions() {\n    this.lockoutMenu();\n    this.headline = 'Beat-Em-Up';\n    this.selectedIdx = 0; // const startOption = new MenuOption('Start', [this.dimensions.width/2, this.dimensions.height/2], this.game.startGame.bind(this.game), true)\n\n    const startOption = new _menu_option__WEBPACK_IMPORTED_MODULE_2__.MenuOption('Start', [this.dimensions.width / 2, this.dimensions.height / 2], this.startGame.bind(this), true);\n    const optionsOption = new _menu_option__WEBPACK_IMPORTED_MODULE_2__.MenuOption('Options', [this.dimensions.width / 2, this.dimensions.height / 1.6], this.createOptionsMenuOptions.bind(this));\n    this.menuOptions = [startOption, optionsOption];\n  }\n\n  createOptionsMenuOptions() {\n    this.lockoutMenu();\n    this.headline = 'Options';\n    this.selectedIdx = 0;\n    const soundOption = new _menu_option__WEBPACK_IMPORTED_MODULE_2__.MenuOption('Sound', [this.dimensions.width / 2, this.dimensions.height / 1.85], this.createSoundMenuOptions.bind(this), true);\n    const difficultyOption = new _menu_option__WEBPACK_IMPORTED_MODULE_2__.MenuOption('Difficulty', [this.dimensions.width / 2, this.dimensions.height / 1.6], this.createDifficultyMenuOptions.bind(this));\n    const controlsOption = new _menu_option__WEBPACK_IMPORTED_MODULE_2__.MenuOption('Change Controls', [this.dimensions.width / 2, this.dimensions.height / 1.4], this.createControlsMenuOptions.bind(this));\n    const backOption = new _menu_option__WEBPACK_IMPORTED_MODULE_2__.MenuOption('Back', [this.dimensions.width / 2, this.dimensions.height / 1.2], this.createMainMenuOptions.bind(this));\n    this.menuOptions = [soundOption, difficultyOption, controlsOption, backOption];\n  }\n\n  createControlsMenuOptions() {\n    // TODO:  Make ACTION to change store adjusted controls somehow, then action to actually change controls\n    this.lockoutMenu();\n    this.headline = 'Controls';\n    this.selectedIdx = 0;\n    this.menuOptions = [new _menu_option__WEBPACK_IMPORTED_MODULE_2__.MenuOption(`Reset Default`, [this.dimensions.width / 2, this.dimensions.height / 3], this.updateControls, true), new _menu_option__WEBPACK_IMPORTED_MODULE_2__.MenuOption(`Up: ${this.game.options.controls['up']}`, [this.dimensions.width / 2, this.dimensions.height / 2.5], this.updateControls), new _menu_option__WEBPACK_IMPORTED_MODULE_2__.MenuOption(`Down: ${this.game.options.controls['down']}`, [this.dimensions.width / 2, this.dimensions.height / 2.2], this.updateControls), new _menu_option__WEBPACK_IMPORTED_MODULE_2__.MenuOption(`Left: ${this.game.options.controls['left']}`, [this.dimensions.width / 2, this.dimensions.height / 1.95], this.updateControls), new _menu_option__WEBPACK_IMPORTED_MODULE_2__.MenuOption(`Right: ${this.game.options.controls['right']}`, [this.dimensions.width / 2, this.dimensions.height / 1.75], this.updateControls), new _menu_option__WEBPACK_IMPORTED_MODULE_2__.MenuOption(`Light Attack: ${this.game.options.controls['lAttack']}`, [this.dimensions.width / 2, this.dimensions.height / 1.59], this.updateControls), new _menu_option__WEBPACK_IMPORTED_MODULE_2__.MenuOption(`Heavy Attack: ${this.game.options.controls['hAttack']}`, [this.dimensions.width / 2, this.dimensions.height / 1.46], this.updateControls), new _menu_option__WEBPACK_IMPORTED_MODULE_2__.MenuOption(`Block: ${this.game.options.controls['block']}`, [this.dimensions.width / 2, this.dimensions.height / 1.35], this.updateControls), new _menu_option__WEBPACK_IMPORTED_MODULE_2__.MenuOption(`Throw/Pick Up Item: ${this.game.options.controls['throw']}`, [this.dimensions.width / 2, this.dimensions.height / 1.26], this.updateControls), new _menu_option__WEBPACK_IMPORTED_MODULE_2__.MenuOption(`Confirm Changes`, [this.dimensions.width / 2, this.dimensions.height / 1.10], this.updateControls), new _menu_option__WEBPACK_IMPORTED_MODULE_2__.MenuOption(`Back`, [this.dimensions.width / 2, this.dimensions.height / 1.04], this.createOptionsMenuOptions.bind(this))];\n  }\n\n  createDifficultyMenuOptions() {\n    this.lockoutMenu();\n    this.headline = 'Difficulty';\n    this.menuOptions = [new _menu_option__WEBPACK_IMPORTED_MODULE_2__.MenuOption('Easy', [this.dimensions.width / 2, this.dimensions.height / 1.85], () => this.adjustDifficulty('easy'), this.game.options.difficulty === 'easy' ? true : false), new _menu_option__WEBPACK_IMPORTED_MODULE_2__.MenuOption('Medium', [this.dimensions.width / 2, this.dimensions.height / 1.6], () => this.adjustDifficulty('medium'), this.game.options.difficulty === 'medium' ? true : false), new _menu_option__WEBPACK_IMPORTED_MODULE_2__.MenuOption('Hard', [this.dimensions.width / 2, this.dimensions.height / 1.4], () => this.adjustDifficulty('hard'), this.game.options.difficulty === 'hard' ? true : false)];\n    this.menuOptions.forEach((option, i) => {\n      if (option.selectedStatus) this.selectedIdx = i;\n    });\n  }\n\n  createSoundMenuOptions() {\n    this.lockoutMenu();\n    this.headline = 'Sound';\n    this.menuOptions = [new _menu_option__WEBPACK_IMPORTED_MODULE_2__.MenuOption('On', [this.dimensions.width / 2, this.dimensions.height / 1.85], () => this.adjustSound('on'), this.game.options.sound === 'on' ? true : false), new _menu_option__WEBPACK_IMPORTED_MODULE_2__.MenuOption('Off', [this.dimensions.width / 2, this.dimensions.height / 1.6], () => this.adjustSound('off'), this.game.options.sound === 'off' ? true : false)];\n    this.menuOptions.forEach((option, i) => {\n      if (option.selectedStatus) this.selectedIdx = i;\n    }); // this.draw(this.ctx)\n  }\n\n  draw(ctx) {\n    var img = new Image();\n\n    img.onload = () => {\n      this.ctx.drawImage(img, 0, 0, this.dimensions.width, this.dimensions.height);\n    };\n\n    img.src = './images/gameBackgrounds/titleMenubackground.jpg'; //draw lightning\n\n    if (this.lightningReady) {\n      const data = _characterModels__WEBPACK_IMPORTED_MODULE_1__.BackgroundModels.lightning[this.getRandomType()];\n      const spriteSheet = new Image();\n\n      spriteSheet.onload = () => {\n        let spriteHeight = spriteSheet.height / data.num_rows;\n        let spriteWidth = spriteSheet.width / data.max_frames;\n        let srcX = spriteWidth * this.currentFrame;\n        let srcY = spriteHeight * data.row;\n        let scaleFactor = 3;\n        if (!this.currentLightningPos) this.currentLightningPos = this.getrandomLightningPos();\n        this.ctx.drawImage(spriteSheet, srcX, srcY, spriteWidth, spriteHeight, this.currentLightningPos, 0, spriteWidth * scaleFactor, spriteHeight * scaleFactor);\n        this.framesDrawn++;\n\n        if (this.framesDrawn === 4) {\n          this.currentFrame++;\n\n          if (this.currentFrame > data.max_frames) {\n            this.lightningReady = false;\n            this.currentLightningPos = null;\n            this.startLightningTimeout();\n          }\n\n          this.framesDrawn = 0;\n        }\n      };\n\n      spriteSheet.src = './images/lightning/lightning.png';\n    }\n\n    ctx.font = '50px Comic Sans MS';\n    ctx.fillStyle = \"red\";\n    ctx.textAlign = \"center\";\n    ctx.fillText(`${this.headline}`, this.dimensions.width / 2, this.dimensions.height / 5); // console.log(this)\n\n    this.menuOptions.forEach(option => option.draw(ctx));\n  }\n\n  startGame() {\n    this.stopMusic();\n    this.game.startInstructions();\n  }\n\n  adjustControls() {}\n\n  adjustDifficulty(difficulty) {\n    this.game.options.difficulty = difficulty;\n    this.createOptionsMenuOptions();\n  }\n\n  adjustSound(soundStatus) {\n    this.game.options.sound = soundStatus;\n    this.createOptionsMenuOptions();\n  }\n\n  startLightningTimeout() {\n    //get time between 1 and 5\n    setTimeout(() => {\n      this.lightningReady = true;\n      this.currentFrame = 0;\n    }, Math.random() * 3000);\n  }\n\n  getRandomType() {\n    return Math.floor(Math.random() * 2) === 0 ? 'typeA' : 'typeB';\n  }\n\n  getrandomLightningPos() {\n    return Math.floor(Math.random() * this.dimensions.width);\n  }\n\n  startMusic() {\n    if (this.game.options.sound === 'on') {\n      this.sound = new howler__WEBPACK_IMPORTED_MODULE_0__.Howl({\n        src: ['./sounds/Searching.ogg']\n      });\n      this.sound.volume(this.game.options.volume.BGM * .1);\n      this.sound.play();\n    }\n  }\n\n  stopMusic() {\n    this.sound.stop();\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/start_menu.js\n");

/***/ }),

/***/ "./src/timer.js":
/*!**********************!*\
  !*** ./src/timer.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Timer\": function() { return /* binding */ Timer; }\n/* harmony export */ });\nclass Timer {\n  constructor(ctx, dimensions) {\n    this.ctx = ctx;\n    this.dimensions = dimensions;\n    this.time = 0;\n    this.counter = this.startTimer();\n  }\n\n  startTimer() {\n    return setInterval(() => this.time += 1, 1000);\n  }\n\n  stopTimer() {\n    clearInterval(this.counter);\n  }\n\n  draw() {\n    this.ctx.font = '40px Sans-serif';\n    this.ctx.strokeStyle = 'black';\n    this.ctx.lineWidth = 8;\n    this.ctx.fillStyle = 'yellow';\n    this.ctx.strokeText('TIME', this.dimensions.width / 2 - 10, 40);\n    this.ctx.fillText('TIME', this.dimensions.width / 2 - 10, 40);\n    this.ctx.font = '60px Sans-serif';\n    this.ctx.strokeText(this.time, this.dimensions.width / 2 - 10, 100);\n    this.ctx.fillText(this.time, this.dimensions.width / 2 - 10, 100);\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdGltZXIuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLEtBQU4sQ0FBWTtBQUNmQyxFQUFBQSxXQUFXLENBQUNDLEdBQUQsRUFBTUMsVUFBTixFQUFrQjtBQUN6QixTQUFLRCxHQUFMLEdBQVdBLEdBQVg7QUFDQSxTQUFLQyxVQUFMLEdBQWtCQSxVQUFsQjtBQUNBLFNBQUtDLElBQUwsR0FBWSxDQUFaO0FBQ0EsU0FBS0MsT0FBTCxHQUFlLEtBQUtDLFVBQUwsRUFBZjtBQUNIOztBQUVEQSxFQUFBQSxVQUFVLEdBQUc7QUFDVCxXQUFPQyxXQUFXLENBQUUsTUFBTSxLQUFLSCxJQUFMLElBQWEsQ0FBckIsRUFBeUIsSUFBekIsQ0FBbEI7QUFDSDs7QUFFREksRUFBQUEsU0FBUyxHQUFHO0FBQ1RDLElBQUFBLGFBQWEsQ0FBQyxLQUFLSixPQUFOLENBQWI7QUFDRjs7QUFFREssRUFBQUEsSUFBSSxHQUFHO0FBQ0gsU0FBS1IsR0FBTCxDQUFTUyxJQUFULEdBQWdCLGlCQUFoQjtBQUNBLFNBQUtULEdBQUwsQ0FBU1UsV0FBVCxHQUF1QixPQUF2QjtBQUNBLFNBQUtWLEdBQUwsQ0FBU1csU0FBVCxHQUFxQixDQUFyQjtBQUNBLFNBQUtYLEdBQUwsQ0FBU1ksU0FBVCxHQUFxQixRQUFyQjtBQUNBLFNBQUtaLEdBQUwsQ0FBU2EsVUFBVCxDQUFvQixNQUFwQixFQUE0QixLQUFLWixVQUFMLENBQWdCYSxLQUFoQixHQUFzQixDQUF0QixHQUEwQixFQUF0RCxFQUEwRCxFQUExRDtBQUNBLFNBQUtkLEdBQUwsQ0FBU2UsUUFBVCxDQUFrQixNQUFsQixFQUEwQixLQUFLZCxVQUFMLENBQWdCYSxLQUFoQixHQUF3QixDQUF4QixHQUE0QixFQUF0RCxFQUEwRCxFQUExRDtBQUNBLFNBQUtkLEdBQUwsQ0FBU1MsSUFBVCxHQUFnQixpQkFBaEI7QUFDQSxTQUFLVCxHQUFMLENBQVNhLFVBQVQsQ0FBb0IsS0FBS1gsSUFBekIsRUFBOEIsS0FBS0QsVUFBTCxDQUFnQmEsS0FBaEIsR0FBd0IsQ0FBeEIsR0FBNEIsRUFBMUQsRUFBK0QsR0FBL0Q7QUFDQSxTQUFLZCxHQUFMLENBQVNlLFFBQVQsQ0FBa0IsS0FBS2IsSUFBdkIsRUFBNkIsS0FBS0QsVUFBTCxDQUFnQmEsS0FBaEIsR0FBd0IsQ0FBeEIsR0FBNEIsRUFBekQsRUFBNkQsR0FBN0Q7QUFDSDs7QUExQmMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hQV9KU19Qcm9qZWN0Ly4vc3JjL3RpbWVyLmpzP2FiNGIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIFRpbWVyIHtcbiAgICBjb25zdHJ1Y3RvcihjdHgsIGRpbWVuc2lvbnMpIHtcbiAgICAgICAgdGhpcy5jdHggPSBjdHg7XG4gICAgICAgIHRoaXMuZGltZW5zaW9ucyA9IGRpbWVuc2lvbnM7XG4gICAgICAgIHRoaXMudGltZSA9IDA7XG4gICAgICAgIHRoaXMuY291bnRlciA9IHRoaXMuc3RhcnRUaW1lcigpO1xuICAgIH1cblxuICAgIHN0YXJ0VGltZXIoKSB7XG4gICAgICAgIHJldHVybiBzZXRJbnRlcnZhbCggKCkgPT4gdGhpcy50aW1lICs9IDEgLCAxMDAwKVxuICAgIH1cblxuICAgIHN0b3BUaW1lcigpIHtcbiAgICAgICBjbGVhckludGVydmFsKHRoaXMuY291bnRlcilcbiAgICB9XG5cbiAgICBkcmF3KCkge1xuICAgICAgICB0aGlzLmN0eC5mb250ID0gJzQwcHggU2Fucy1zZXJpZic7XG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZVN0eWxlID0gJ2JsYWNrJztcbiAgICAgICAgdGhpcy5jdHgubGluZVdpZHRoID0gODtcbiAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gJ3llbGxvdyc7XG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZVRleHQoJ1RJTUUnLCB0aGlzLmRpbWVuc2lvbnMud2lkdGgvMiAtIDEwLCA0MClcbiAgICAgICAgdGhpcy5jdHguZmlsbFRleHQoJ1RJTUUnLCB0aGlzLmRpbWVuc2lvbnMud2lkdGggLyAyIC0gMTAsIDQwKTtcbiAgICAgICAgdGhpcy5jdHguZm9udCA9ICc2MHB4IFNhbnMtc2VyaWYnO1xuICAgICAgICB0aGlzLmN0eC5zdHJva2VUZXh0KHRoaXMudGltZSx0aGlzLmRpbWVuc2lvbnMud2lkdGggLyAyIC0gMTAgLCAxMDApO1xuICAgICAgICB0aGlzLmN0eC5maWxsVGV4dCh0aGlzLnRpbWUsIHRoaXMuZGltZW5zaW9ucy53aWR0aCAvIDIgLSAxMCwgMTAwKTtcbiAgICB9XG5cbn0iXSwibmFtZXMiOlsiVGltZXIiLCJjb25zdHJ1Y3RvciIsImN0eCIsImRpbWVuc2lvbnMiLCJ0aW1lIiwiY291bnRlciIsInN0YXJ0VGltZXIiLCJzZXRJbnRlcnZhbCIsInN0b3BUaW1lciIsImNsZWFySW50ZXJ2YWwiLCJkcmF3IiwiZm9udCIsInN0cm9rZVN0eWxlIiwibGluZVdpZHRoIiwiZmlsbFN0eWxlIiwic3Ryb2tlVGV4dCIsIndpZHRoIiwiZmlsbFRleHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/timer.js\n");

/***/ }),

/***/ "./node_modules/howler/dist/howler.js":
/*!********************************************!*\
  !*** ./node_modules/howler/dist/howler.js ***!
  \********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n *  howler.js v2.2.3\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Pool of unlocked HTML5 Audio objects.\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto audio unlocker.\n      self.autoUnlock = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Handle stopping all sounds globally.\n     */\n    stop: function() {\n      var self = this || Howler;\n\n      // Loop through all Howls and stop them.\n      for (var i=0; i<self._howls.length; i++) {\n        self._howls[i].stop();\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var ua = self._navigator ? self._navigator.userAgent : '';\n      var checkOpera = ua.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n      var checkSafari = ua.indexOf('Safari') !== -1 && ua.indexOf('Chrome') === -1;\n      var safariVersion = ua.match(/Version\\/(.*?) /);\n      var isOldSafari = (checkSafari && safariVersion && parseInt(safariVersion[1], 10) < 15);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!(audioTest.canPlayType('audio/wav; codecs=\"1\"') || audioTest.canPlayType('audio/wav')).replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n        webm: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function() {\n      var self = this || Howler;\n\n      // Only run this if Web Audio is supported and it hasn't already been unlocked.\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function(e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        while (self._html5AudioPool.length < self.html5PoolSize) {\n          try {\n            var audioNode = new Audio();\n\n            // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n            audioNode._unlocked = true;\n\n            // Add the audio node to the pool.\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n            break;\n          }\n        }\n\n        // Loop through any assigned audio nodes and unlock them.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and unlock the audio nodes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n                sound._node.load();\n              }\n            }\n          }\n        }\n\n        // Fix Android can not play in suspend state.\n        self._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._audioUnlocked = true;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n          document.removeEventListener('keydown', unlock, true);\n\n          // Let all sounds know that audio has been unlocked.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n      document.addEventListener('keydown', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function() {\n      var self = this || Howler;\n\n      // Return the next object from the pool if one exists.\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      }\n\n      //.Check if the audio is locked and throw a warning.\n      var testPlay = new Audio().play();\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function() {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function(audio) {\n      var self = this || Howler;\n\n      // Don't add audio to the pool if we don't know if it has been unlocked.\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n\n        // Handle updating the state of the audio context after suspending.\n        var handleSuspension = function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        };\n\n        // Either the state gets suspended or it is interrupted.\n        // Either way, we need to update the state to suspended.\n        self.ctx.suspend().then(handleSuspension, handleSuspension);\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean' || o.preload === 'metadata') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhr = {\n        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',\n        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,\n        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false,\n      };\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload && self._preload !== 'none') {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        if (!self._playLock) {\n          var num = 0;\n          for (var i=0; i<self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Mark this sound as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite;\n\n      // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n      sound._ended = false;\n\n      // Update the parameters of the sound.\n      var setParams = function() {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      };\n\n      // End the sound instantly if seek is at the end.\n      if (seek >= stop) {\n        self._ended(sound);\n        return;\n      }\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._playLock = false;\n          setParams();\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {\n          playWebAudio();\n        } else {\n          self._playLock = true;\n\n          // Wait for the audio context to resume before playing.\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Some browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Set param values immediately.\n              setParams();\n\n              // Releases the lock and executes queued actions.\n              play\n                .then(function() {\n                  self._playLock = false;\n                  node._unlocked = true;\n                  if (!internal) {\n                    self._emit('play', sound._id);\n                  } else {\n                    self._loadQueue();\n                  }\n                })\n                .catch(function() {\n                  self._playLock = false;\n                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                    'on mobile devices and Chrome where playback was not within a user interaction.');\n\n                  // Reset the ended and paused values.\n                  sound._ended = true;\n                  sound._paused = true;\n                });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n              self._emit('play', sound._id);\n            }\n\n            // Setting rate before playing won't work in IE, so we set it again here.\n            node.playbackRate = sound._rate;\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                'on mobile devices and Chrome where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the end timer on sprites or listen for the ended event.\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function() {\n                // Fire ended on this audio node.\n                self._ended(sound);\n\n                // Clear this listener.\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // If this is streaming audio, make sure the src is set and load again.\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        }\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n          self._state = 'loading';\n\n          var listener = function() {\n            self._state = 'loaded';\n            \n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n\n              // If this is a live stream, stop download once the audio is stopped.\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded'|| self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded'|| self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Make sure the to/from/len values are numbers.\n      from = Math.min(Math.max(0, parseFloat(from)), 1);\n      to = Math.min(Math.max(0, parseFloat(to)), 1);\n      len = parseFloat(len);\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function() {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Make sure the volume is in the right bounds.\n        if (diff < 0) {\n          vol = Math.max(to, vol);\n        } else {\n          vol = Math.min(to, vol);\n        }\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n\n              // If playing, restart playback to ensure looping updates.\n              if (self.playing(ids[i])) {\n                self.pause(ids[i], true);\n                self.play(ids[i], true);\n              }\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        if (self._sounds.length) {\n          id = self._sounds[0]._id;\n        }\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return 0;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (typeof seek === 'number' && (self._state !== 'loaded' || self._playLock)) {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          }\n\n          // Seek and emit when ready.\n          var seekAndEmit = function() {\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n\n            self._emit('seek', id);\n          };\n\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\n          if (playing && !self._webAudio) {\n            var emitSeek = function() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node);\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n          sounds[i]._node.removeEventListener('ended', sounds[i]._endFn, false);\n\n          // Release the Audio object back to the pool.\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n      }\n\n      // Remove the references in the global Howler object.\n      var index = Howler._howls.indexOf(self);\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          var isId = (id === events[i].id);\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      // Pass the event type into load queue so that it can continue stepping.\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // Remove this task if a matching event was passed.\n        if (task.event === event) {\n          self._queue.shift();\n          self._loadQueue();\n        }\n\n        // Run the task if no event type is passed.\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        if (isIOS) {\n          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\n        }\n      }\n      node.bufferSource = null;\n\n      return self;\n    },\n\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function(node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Listen for the 'ended' event on the sound to account for edge-case where\n        // a finite sound has a duration of Infinity.\n        self._endFn = self._endListener.bind(self);\n        self._node.addEventListener('ended', self._endFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = parent._preload === true ? 'auto' : parent._preload;\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    },\n\n    /**\n     * HTML5 Audio ended listener callback.\n     */\n    _endListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Only handle the `ended`` event if the duration is Infinity.\n      if (parent._duration === Infinity) {\n        // Update the parent duration to match the real audio duration.\n        // Round up the duration to account for the lower precision in HTML5 Audio.\n        parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n        // Update the sprite that corresponds to the real duration.\n        if (parent._sprite.__default[1] === Infinity) {\n          parent._sprite.__default[1] = parent._duration * 1000;\n        }\n\n        // Run the regular ended method.\n        parent._ended(self);\n      }\n\n      // Clear the event listener since the duration is now correct.\n      self._node.removeEventListener('ended', self._endFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open(self._xhr.method, url, true);\n      xhr.withCredentials = self._xhr.withCredentials;\n      xhr.responseType = 'arraybuffer';\n\n      // Apply any custom headers to the request.\n      if (self._xhr.headers) {\n        Object.keys(self._xhr.headers).forEach(function(key) {\n          xhr.setRequestHeader(key, self._xhr.headers[key]);\n        });\n      }\n\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    };\n\n    // Load the sound on success.\n    var success = function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    };\n\n    // Decode the buffer into an audio source.\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  }\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    }\n\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // If the audio context creation still failed, set using web audio to false.\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (true) {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Add to global in Node.js (for testing, etc).\n  if (typeof __webpack_require__.g !== 'undefined') {\n    __webpack_require__.g.HowlerGlobal = HowlerGlobal;\n    __webpack_require__.g.Howler = Howler;\n    __webpack_require__.g.Howl = Howl;\n    __webpack_require__.g.Sound = Sound;\n  } else if (typeof window !== 'undefined') {  // Define globally in case AMD is not available or unused.\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.2.3\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        };\n\n        // Update the panner values or create a new panner if none exists.\n        var panner = sound._panner;\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n        self._panner = undefined;\n        parent._refreshBuffer(self);\n      }\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/howler/dist/howler.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hQV9KU19Qcm9qZWN0Ly4vc3JjL2luZGV4LnNjc3M/OTc0NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	!function() {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;